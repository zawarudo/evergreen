(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{946:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return p})),t.d(n,"default",(function(){return i}));t(5),t(6),t(4),t(7),t(2),t(0);var o=t(120),l=t(940),a=t(941);var p={},u={_frontmatter:p},r=l.a;function i(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,["components"]);return Object(o.b)(r,Object.assign({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Introduction"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Autocomplete")," components renders a filterable list of options in a ",Object(o.b)("inlineCode",{parentName:"p"},"Popover")," â€” it does not render the text input.\nIf you need a combination with a text input and trigger button, take a look at the ",Object(o.b)("inlineCode",{parentName:"p"},"Combobox")," component.\nThis component is mainly used to create type aheads"),Object(o.b)("h3",null,"You might not need ",Object(o.b)("inlineCode",{parentName:"h3"},"Autocomplete")),Object(o.b)("p",null,"In some cases you might be better off using ",Object(o.b)("inlineCode",{parentName:"p"},"Combobox")," or ",Object(o.b)("inlineCode",{parentName:"p"},"SelectMenu"),"."),Object(o.b)("h3",null,"The autocomplete component combines a set of external libraries"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Uses ",Object(o.b)("inlineCode",{parentName:"li"},"Downshift")," for autocomplete"),Object(o.b)("li",{parentName:"ul"},"Uses ",Object(o.b)("inlineCode",{parentName:"li"},"react-tiny-virtual-list")," for performant list rendering"),Object(o.b)("li",{parentName:"ul"},"Uses ",Object(o.b)("inlineCode",{parentName:"li"},"fuzzaldrin-plus")," for fuzzy filtering")),Object(o.b)("h2",null,"Default example"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Autocomplete\n  title=\"Fruits\"\n  onChange={(changedItem) => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {(props) => {\n    const { getInputProps, getRef, inputValue } = props\n    return (\n      <TextInput\n        placeholder=\"Fruits\"\n        value={inputValue}\n        innerRef={getRef}\n        {...getInputProps()}\n      />\n    )\n  }}\n</Autocomplete>\n")),Object(o.b)("h2",null,"Using children prop"),Object(o.b)("p",null,"There is no difference between using this syntax and the above syntax."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Autocomplete\n  title=\"Fruits\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n  children={(props) => {\n    const { getInputProps, getRef, inputValue } = props\n    return (\n      <TextInput\n        placeholder=\"Fruits\"\n        value={inputValue}\n        innerRef={getRef}\n        {...getInputProps()}\n      />\n    )\n  }}\n/>\n")),Object(o.b)("h2",null,"Open on focus"),Object(o.b)("p",null,"Get the ",Object(o.b)("inlineCode",{parentName:"p"},"openMenu")," prop to manually open the menu on certain events such as ",Object(o.b)("inlineCode",{parentName:"p"},"onFocus"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Autocomplete\n  title=\"Fruits\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {(props) => {\n    const { getInputProps, getRef, inputValue, openMenu } = props\n    return (\n      <TextInput\n        placeholder=\"Open on focus\"\n        value={inputValue}\n        innerRef={getRef}\n        {...getInputProps({\n          onFocus: () => {\n            openMenu()\n          }\n        })}\n      />\n    )\n  }}\n</Autocomplete>\n")),Object(o.b)("h2",null,"Results with an external trigger"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Autocomplete\n  title=\"Fruits\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {({\n    getInputProps,\n    getToggleButtonProps,\n    getRef,\n    inputValue,\n    toggleMenu\n  }) => (\n    <Pane innerRef={getRef} display=\"inline-block\">\n      <TextInput\n        placeholder=\"Trigger with button\"\n        value={inputValue}\n        {...getInputProps()}\n      />\n      <Button onClick={toggleMenu} {...getToggleButtonProps()}>\n        Trigger\n      </Button>\n    </Pane>\n  )}\n</Autocomplete>\n")),Object(o.b)("h2",null,"Fully featured example"),Object(o.b)("p",null,"Full width with flex and options title, onFocus, filtering, and button to trigger the autocomplete.\nNote that this is very similar to the ",Object(o.b)("inlineCode",{parentName:"p"},"Combobox")," component.\nConsider using that component before using the ",Object(o.b)("inlineCode",{parentName:"p"},"Autocomplete")," component directly."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Autocomplete\n  title=\"Custom title\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {({\n    key,\n    getInputProps,\n    getToggleButtonProps,\n    getRef,\n    inputValue,\n    openMenu,\n    toggleMenu\n  }) => (\n    <Pane\n      key={key}\n      innerRef={getRef}\n      display=\"flex\"\n    >\n      <TextInput\n        flex=\"1\"\n        placeholder=\"Many Options!\"\n        value={inputValue}\n        onFocus={openMenu}\n        {...getInputProps()}\n      />\n      <Button onClick={toggleMenu} {...getToggleButtonProps()}>\n        Trigger\n      </Button>\n    </Pane>\n  )}\n</Autocomplete>\n")),Object(o.b)(a.a,{of:"Autocomplete",mdxType:"PropsTable"}))}i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-components-autocomplete-mdx-016e6311be02401765b4.js.map