{"version":3,"sources":["webpack:///./src/pages/components/autocomplete.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"mPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,4BAAW,0BAAYC,WAAW,KAAvB,gBAAX,yDAA6H,0BAAYA,WAAW,KAAvB,WAA7H,6HACiF,0BAAYA,WAAW,KAAvB,YADjF,oEAGA,4CAA2B,0BAAYA,WAAW,MAAvB,iBAC3B,oEAAmD,0BAAYA,WAAW,KAAvB,YAAnD,OAA+G,0BAAYA,WAAW,KAAvB,cAA/G,KACA,yFACA,sBACE,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,aAA7B,qBACA,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,2BAA7B,kCACA,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,mBAA7B,yBAEF,yCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0aAoBL,6CACA,+FACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iaAmBL,uCACA,gCAAe,0BAAYA,WAAW,KAAvB,YAAf,6DAAiI,0BAAYA,WAAW,KAAvB,WAAjI,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sgBAwBL,0DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ilBA2BL,gDACA,mKACoC,0BAAYA,WAAW,KAAvB,YADpC,+DAE6C,0BAAYA,WAAW,KAAvB,gBAF7C,wBAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,urBAmCL,YAAC,IAAD,CAAYC,GAAG,eAAeF,QAAQ,gBAK1CH,EAAWM,gBAAiB","file":"component---src-pages-components-autocomplete-mdx-016e6311be02401765b4.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Autocomplete`}</inlineCode>{` components renders a filterable list of options in a `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` â€” it does not render the text input.\nIf you need a combination with a text input and trigger button, take a look at the `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{` component.\nThis component is mainly used to create type aheads`}</p>\n    <h3>{`You might not need `}<inlineCode parentName=\"h3\">{`Autocomplete`}</inlineCode></h3>\n    <p>{`In some cases you might be better off using `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{`.`}</p>\n    <h3>{`The autocomplete component combines a set of external libraries`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Uses `}<inlineCode parentName=\"li\">{`Downshift`}</inlineCode>{` for autocomplete`}</li>\n      <li parentName=\"ul\">{`Uses `}<inlineCode parentName=\"li\">{`react-tiny-virtual-list`}</inlineCode>{` for performant list rendering`}</li>\n      <li parentName=\"ul\">{`Uses `}<inlineCode parentName=\"li\">{`fuzzaldrin-plus`}</inlineCode>{` for fuzzy filtering`}</li>\n    </ul>\n    <h2>{`Default example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Autocomplete\n  title=\"Fruits\"\n  onChange={(changedItem) => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {(props) => {\n    const { getInputProps, getRef, inputValue } = props\n    return (\n      <TextInput\n        placeholder=\"Fruits\"\n        value={inputValue}\n        innerRef={getRef}\n        {...getInputProps()}\n      />\n    )\n  }}\n</Autocomplete>\n`}</code></pre>\n    <h2>{`Using children prop`}</h2>\n    <p>{`There is no difference between using this syntax and the above syntax.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Autocomplete\n  title=\"Fruits\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n  children={(props) => {\n    const { getInputProps, getRef, inputValue } = props\n    return (\n      <TextInput\n        placeholder=\"Fruits\"\n        value={inputValue}\n        innerRef={getRef}\n        {...getInputProps()}\n      />\n    )\n  }}\n/>\n`}</code></pre>\n    <h2>{`Open on focus`}</h2>\n    <p>{`Get the `}<inlineCode parentName=\"p\">{`openMenu`}</inlineCode>{` prop to manually open the menu on certain events such as `}<inlineCode parentName=\"p\">{`onFocus`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Autocomplete\n  title=\"Fruits\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {(props) => {\n    const { getInputProps, getRef, inputValue, openMenu } = props\n    return (\n      <TextInput\n        placeholder=\"Open on focus\"\n        value={inputValue}\n        innerRef={getRef}\n        {...getInputProps({\n          onFocus: () => {\n            openMenu()\n          }\n        })}\n      />\n    )\n  }}\n</Autocomplete>\n`}</code></pre>\n    <h2>{`Results with an external trigger`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Autocomplete\n  title=\"Fruits\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {({\n    getInputProps,\n    getToggleButtonProps,\n    getRef,\n    inputValue,\n    toggleMenu\n  }) => (\n    <Pane innerRef={getRef} display=\"inline-block\">\n      <TextInput\n        placeholder=\"Trigger with button\"\n        value={inputValue}\n        {...getInputProps()}\n      />\n      <Button onClick={toggleMenu} {...getToggleButtonProps()}>\n        Trigger\n      </Button>\n    </Pane>\n  )}\n</Autocomplete>\n`}</code></pre>\n    <h2>{`Fully featured example`}</h2>\n    <p>{`Full width with flex and options title, onFocus, filtering, and button to trigger the autocomplete.\nNote that this is very similar to the `}<inlineCode parentName=\"p\">{`Combobox`}</inlineCode>{` component.\nConsider using that component before using the `}<inlineCode parentName=\"p\">{`Autocomplete`}</inlineCode>{` component directly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Autocomplete\n  title=\"Custom title\"\n  onChange={changedItem => console.log(changedItem)}\n  items={['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']}\n>\n  {({\n    key,\n    getInputProps,\n    getToggleButtonProps,\n    getRef,\n    inputValue,\n    openMenu,\n    toggleMenu\n  }) => (\n    <Pane\n      key={key}\n      innerRef={getRef}\n      display=\"flex\"\n    >\n      <TextInput\n        flex=\"1\"\n        placeholder=\"Many Options!\"\n        value={inputValue}\n        onFocus={openMenu}\n        {...getInputProps()}\n      />\n      <Button onClick={toggleMenu} {...getToggleButtonProps()}>\n        Trigger\n      </Button>\n    </Pane>\n  )}\n</Autocomplete>\n`}</code></pre>\n    <PropsTable of=\"Autocomplete\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}