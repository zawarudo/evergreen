{"version":3,"sources":["webpack:///./src/pages/components/button.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","id","of","isMDXComponent"],"mappings":"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","file":"component---src-pages-components-button-mdx-030aff85c088262f8d53.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Evergreen exports multiple button components`}</h2>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Button`}</strong>{`: most commonly used, can have a icon on the left or right side.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`IconButton`}</strong>{`: a button that holds a single icon.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`BackButton`}</strong>{`: a preset of the `}<inlineCode parentName=\"li\">{`Button`}</inlineCode>{` component.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TextDropdownButton`}</strong>{`: a bare-bones button that is used primarily in table headers.`}</li>\n    </ul>\n    <p><inlineCode parentName=\"p\">{`Button`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`BackButton`}</inlineCode>{` all share a very similar API and look.\n`}<inlineCode parentName=\"p\">{`TextDropdownButton`}</inlineCode>{` is a bit different.`}</p>\n    <h1>{`Button`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component is the most common button component.\nIt contains a label and optional icons before or after the label.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button appearance=\"primary\">Hi Evergreen!</Button>\n`}</code></pre>\n    <h2>{`All button variations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Component\n  initialState={{\n    options: [\n      { label: 'Height 24', value: 24 },\n      { label: 'Height 32', value: 32 },\n      { label: 'Height 40', value: 40 }\n    ],\n    value: 32\n  }}\n>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SegmentedControl\n        name=\"button-size\"\n        width={280}\n        options={state.options}\n        value={state.value}\n        onChange={value => setState({ value: Number(value) })}\n      />\n      <Heading marginTop=\"default\">Default Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} marginRight={16}>\n          Default\n        </Button>\n        <Button height={state.value} marginRight={16} intent=\"success\">\n          Success\n        </Button>\n        <Button height={state.value} marginRight={16} intent=\"warning\">\n          Warning\n        </Button>\n        <Button height={state.value} marginRight={16} intent=\"danger\">\n          Danger\n        </Button>\n        <Button height={state.value} marginRight={16} iconBefore=\"edit\">\n          Icon Before\n        </Button>\n        <Button height={state.value} iconAfter=\"arrow-right\">\n          Icon After\n        </Button>\n      </Pane>\n      <Heading marginTop=\"default\">Primary Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} appearance=\"primary\" marginRight={16}>\n          Default\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"primary\"\n          marginRight={16}\n          intent=\"success\"\n        >\n          Success\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"primary\"\n          marginRight={16}\n          intent=\"warning\"\n        >\n          Warning\n        </Button>\n        <Button height={state.value} marginRight={16} appearance=\"primary\" intent=\"danger\">\n          Danger\n        </Button>\n        <Button height={state.value} marginRight={16} appearance=\"primary\" intent=\"success\" iconBefore=\"add\">\n          Icon Before\n        </Button>\n        <Button height={state.value} appearance=\"primary\" iconAfter=\"arrow-right\">\n          Icon After\n        </Button>\n      </Pane>\n      <Heading marginTop=\"default\">Minimal Appearance</Heading>\n      <Pane marginTop={12}>\n        <Button height={state.value} appearance=\"minimal\" marginRight={16}>\n          Default\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"minimal\"\n          marginRight={16}\n          intent=\"success\"\n        >\n          Success\n        </Button>\n        <Button\n          height={state.value}\n          appearance=\"minimal\"\n          marginRight={16}\n          intent=\"warning\"\n        >\n          Warning\n        </Button>\n        <Button height={state.value} marginRight={16} appearance=\"minimal\" intent=\"danger\">\n          Danger\n        </Button>\n        <Button height={state.value} marginRight={16} appearance=\"minimal\" iconBefore=\"edit\">\n          Icon Before\n        </Button>\n        <Button height={state.value} appearance=\"minimal\" iconAfter=\"caret-down\">\n          Icon After\n        </Button>\n      </Pane>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Button Appearances`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component has a `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` property with 3 available values:`}</p>\n    <h3>{`Appearances`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`default`}</inlineCode>{` — this is the default.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`primary`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minimal`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16}>Default</Button>\n  <Button marginRight={16} appearance=\"primary\">Primary</Button>\n  <Button marginRight={16} appearance=\"minimal\">Minimal</Button>\n</>\n`}</code></pre>\n    <h2>{`Button Intent`}</h2>\n    <p>{`In addition to the `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{` — a `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` can also have a `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` property.\nThe `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` property is a slightly abstract API that maps to the following values:`}</p>\n    <h3>{`Intent`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`none`}</inlineCode>{` — this is the default.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`success`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`warning`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`danger`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16} intent=\"none\">None</Button>\n  <Button marginRight={16} intent=\"success\">Success</Button>\n  <Button marginRight={16} intent=\"warning\">Warning</Button>\n  <Button marginRight={16} intent=\"danger\">Danger</Button>\n</>\n`}</code></pre>\n    <h2>{`Mixing appearance and intent`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` property works with any `}<inlineCode parentName=\"p\">{`appearance`}</inlineCode>{`.`}</p>\n    <h3>{`Primary with Intent`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16} appearance=\"primary\" intent=\"none\">None</Button>\n  <Button marginRight={16} appearance=\"primary\" intent=\"success\">Success</Button>\n  <Button marginRight={16} appearance=\"primary\" intent=\"warning\">Warning</Button>\n  <Button marginRight={16} appearance=\"primary\" intent=\"danger\">Danger</Button>\n</>\n`}</code></pre>\n    <h3>{`Minimal with Intent`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"none\">None</Button>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"success\">Success</Button>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"warning\">Warning</Button>\n  <Button marginRight={16} appearance=\"minimal\" intent=\"danger\">Danger</Button>\n</>\n`}</code></pre>\n    <h2>{`Button Sizes`}</h2>\n    <p>{`By default buttons and controls have a height of `}<inlineCode parentName=\"p\">{`32px`}</inlineCode>{`.\nIt is possible to change this to any height and the text style and spacing will adjust.\nYou should however keep the height on the `}<inlineCode parentName=\"p\">{`8px`}</inlineCode>{` or in some cases the `}<inlineCode parentName=\"p\">{`4px`}</inlineCode>{` grid.\nYou should only need the following recommended heights.`}</p>\n    <h3>{`Recommended heights`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`24`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`32`}</inlineCode>{` — default height`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`40`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={12} height={20}>Height 20</Button>\n  <Button marginRight={12} height={24}>Height 24</Button>\n  <Button marginRight={12} height={32}>Height 32</Button>\n  <Button marginRight={12} height={40}>Height 40</Button>\n  <Button marginRight={12} height={48}>Height 48</Button>\n  <Button marginRight={12} height={56}>Height 56</Button>\n</>\n`}</code></pre>\n    <h2>{`Buttons with an Icon`}</h2>\n    <p>{`Buttons support an icon on either before or after the label. Avoid using two icons in a button.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<>\n  <Button marginRight={12} iconBefore=\"cog\">Settings</Button>\n  <Button marginRight={12} iconBefore=\"edit\">Edit</Button>\n  <Button marginRight={12} iconBefore=\"manual\">Docs</Button>\n  <Button marginRight={12} iconBefore=\"arrow-left\">Back</Button>\n  <Button marginRight={12} iconBefore=\"download\">Download...</Button>\n  <Button marginRight={12} iconBefore=\"trash\" intent=\"danger\">Delete...</Button>\n  <Button marginRight={12} iconBefore=\"search\">Search</Button>\n  <Button marginRight={12} iconAfter=\"caret-down\">Filter</Button>\n</>\n`}</code></pre>\n    <div id=\"api\">\n  <PropsTable of=\"Button\" mdxType=\"PropsTable\" />\n    </div>\n    <h1>{`IconButton`}</h1>\n    <p>{`For the use case of creating a button with a single icon Evergreen exports the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` component.`}</p>\n    <h2>{`Simple IconButton example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton icon=\"trash\" intent=\"danger\" />\n`}</code></pre>\n    <h2>{`Use the height property to resize the icon button`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` property on the `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` component to resize the component.\nThe icon will automatically resize for the given height.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton icon=\"cross\" height={40} />\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton icon=\"cross\" height={24} />\n`}</code></pre>\n    <h2>{`Specifically override the icon size`}</h2>\n    <p>{`In some rare cases you might need to override the icon size.\nUse the `}<inlineCode parentName=\"p\">{`iconSize`}</inlineCode>{` property to do this.`}</p>\n    <p>{`This is not a required property, the icon will automatically resize based on the given height.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<IconButton appearance=\"minimal\" icon=\"notifications\" iconSize={18} />\n`}</code></pre>\n    <h2>{`Common icon buttons`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Pane clearfix>\n  <Pane borderRight paddingRight={24} marginRight={24} float=\"left\">\n    <Heading marginBottom={16}>Height 32</Heading>\n    <Pane float=\"left\" marginRight={16}>\n      <IconButton marginBottom={16} icon=\"cog\" />\n      <IconButton marginBottom={16} icon=\"plus\" />\n      <IconButton marginBottom={16} icon=\"filter\" />\n      <IconButton marginBottom={16} icon=\"edit\" />\n      <IconButton marginBottom={16} icon=\"refresh\" />\n    </Pane>\n    <Pane float=\"left\">\n      <IconButton marginBottom={16} appearance=\"minimal\" icon=\"cross\" />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon=\"more\" />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon=\"plus\" />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon=\"edit\" />\n      <IconButton marginBottom={16} appearance=\"minimal\" icon=\"search\" />\n    </Pane>\n  </Pane>\n  <Pane float=\"left\">\n    <Heading marginBottom={16}>Height 24</Heading>\n    <Pane float=\"left\" marginRight={16}>\n      <IconButton marginBottom={16} height={24} icon=\"cog\" />\n      <IconButton marginBottom={16} height={24} icon=\"plus\" />\n      <IconButton marginBottom={16} height={24} icon=\"filter\" />\n      <IconButton marginBottom={16} height={24} icon=\"edit\" />\n      <IconButton marginBottom={16} height={24} icon=\"chevron-left\" />\n      <IconButton marginBottom={16} height={24} icon=\"chevron-right\" />\n    </Pane>\n    <Pane float=\"left\" marginRight={16}>\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"cross\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"more\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"plus\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"trash\"\n        intent=\"danger\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"filter\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"edit\"\n      />\n    </Pane>\n    <Pane float=\"left\">\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"clipboard\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"calendar\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"lock\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"unlock\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"notifications\"\n      />\n      <IconButton\n        marginBottom={16}\n        appearance=\"minimal\"\n        height={24}\n        icon=\"manual\"\n      />\n    </Pane>\n  </Pane>\n</Pane>\n`}</code></pre>\n    <PropsTable of=\"IconButton\" mdxType=\"PropsTable\" />\n    <h1>{`BackButton component`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`BackButton`}</inlineCode>{` component is a preset based on the `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<BackButton />\n`}</code></pre>\n    <PropsTable of=\"BackButton\" mdxType=\"PropsTable\" />\n    <h1>{`Buttons as links`}</h1>\n    <p>{`Buttons can be used as links by using the optional `}<inlineCode parentName=\"p\">{`is`}</inlineCode>{` property with a value such as `}<inlineCode parentName=\"p\">{`Link`}</inlineCode>{` from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/ReactTraining/react-router\"\n      }}>{`react-router`}</a>{`, or an `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` tag.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button is=\"a\" href=\"#\">Link</Button>\n`}</code></pre>\n    <h1>{`TextDropdownButton component`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextDropdownButton`}</inlineCode>{` is different from the other types of buttons.\nIt doesn’t work with a height, instead the dimensions are based on the text size.\nThis component is used inside of table header cells.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane>\n  <TextDropdownButton marginRight={16}>Table Header</TextDropdownButton>\n  <TextDropdownButton marginRight={16} icon=\"arrow-up\">Ascending</TextDropdownButton>\n  <TextDropdownButton icon=\"arrow-down\">Descending</TextDropdownButton>\n</Pane>\n`}</code></pre>\n    <PropsTable of=\"TextDropdownButton\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}