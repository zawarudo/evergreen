(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{953:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return c}));t(5),t(6),t(4),t(7),t(2),t(0);var o=t(120),a=t(940),i=t(941);var l={},s={_frontmatter:l},r=a.a;function c(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(o.b)(r,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Introduction"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"Dialog")," component is used to show content on top of an overlay.\nIt blocks any interaction with the page — until the overlay is clicked, or a close action is triggered."),Object(o.b)("h3",null,"When to use"),Object(o.b)("p",null,"When you require your user to interact with you app and\ndon’t want your users to jump to a different page and break their workflow."),Object(o.b)("p",null,"You should also use a dialog in cases where you need to ask for confirmation\nfrom the user before doing a lengthy or dangerous action.\nThis could be a deletion of some sorts or initiating a lengthy download."),Object(o.b)("h3",null,"Terminology"),Object(o.b)("p",null,Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://blueprintjs.com/docs/versions/2/#core/components/dialog"}),"BlueprintJS")," pointed out in their documentation that “modal” is a misnomer for “dialog”."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The term “modal” is sometimes used to mean “dialog”, but this is a misnomer.\nModal is an adjective that describes parts of a UI.\nAn element is considered modal if it ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Modal_window"}),"blocks interaction with the rest of the application"),".\nWe use the term “dialog” to avoid confusion with the adjective.")),Object(o.b)("h3",null,"Focus Management"),Object(o.b)("p",null,"When opening a ",Object(o.b)("inlineCode",{parentName:"p"},"Dialog"),", focus will be brought inside the ",Object(o.b)("inlineCode",{parentName:"p"},"Dialog"),"\nWhen using both the cancel and confirm button, the cancel button will get focus first."),Object(o.b)("p",null,"When closing the Dialog, focus will be brought back to the element that was focused before opening the ",Object(o.b)("inlineCode",{parentName:"p"},"Dialog"),".\nThis is normally the button that triggered the ",Object(o.b)("inlineCode",{parentName:"p"},"Dialog"),"."),Object(o.b)("h2",null,"Default dialog example"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title="Dialog title"\n        onCloseComplete={() => setState({ isShown: false })}\n        confirmLabel="Custom Label"\n      >\n        Dialog content\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n')),Object(o.b)("h2",null,"Default with a danger intent"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"intent")," prop determines the appearance of the confirm button, ",Object(o.b)("inlineCode",{parentName:"p"},"danger")," is red."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title="Danger intent"\n        intent="danger"\n        onCloseComplete={() => setState({ isShown: false })}\n        confirmLabel="Delete Something"\n      >\n        Dialog content\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n')),Object(o.b)("h2",null,"Confirm button with loading confirmation"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component\n  initialState={{ isShown: false, isLoading: false }}\n  didUpdate={({ state, setState }) => {\n    if (state.isLoading === true) {\n      window.setTimeout(() => {\n        setState({\n          isShown: false\n        })\n      }, 2000)\n    }\n  }}\n>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title=\"Loading confirmation\"\n        onCloseComplete={() => setState({ isShown: false, isLoading: false })}\n        isConfirmLoading={state.isLoading}\n        onConfirm={() => setState({ isLoading: true })}\n        confirmLabel={state.isLoading ? 'Loading...' : 'Confirm Loading'}\n      >\n        Dialog content\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n")),Object(o.b)("h2",null,"Internal scrolling"),Object(o.b)("p",null,"When content makes the dialog height greater than the available space in the viewport,\nthe content area will become scrollable\nIt will add a symmetric offset on the top and bottom — based on the topOffset prop."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title="Internal scrolling"\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        <Pane height={1800} width="100%" backgroundColor="#ddd" />\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n')),Object(o.b)("h2",null,"Self managed close"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title="Self managed close"\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        {({ close }) => (\n          <Pane>\n            <Paragraph>Manage your own buttons and close interaction</Paragraph>\n            <Button marginTop={16} onClick={close}>\n              Self Managed Close\n            </Button>\n          </Pane>\n        )}\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n')),Object(o.b)("h2",null,"Remove default footer"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"hasFooter")," prop to show or hide the footer.\nThis will hide the confirm and cancel buttons."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title="No footer"\n        onCloseComplete={() => setState({ isShown: false })}\n        hasFooter={false}\n      >\n        No footer\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n')),Object(o.b)("h2",null,"Remove default header"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"hasHeader")," prop to show or hide the header.\nThis will hide both the close icon button as the title."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        hasHeader={false}\n      >\n        No header\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n")),Object(o.b)("h2",null,"Remove default footer and header"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"hasFooter"),", ",Object(o.b)("inlineCode",{parentName:"p"},"hasHeader")," props to show or hide the footer and header."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        hasFooter={false}\n        hasHeader={false}\n      >\n        Completely custom dialog\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n")),Object(o.b)("h2",null,"Preserve scroll position and prevent body scrolling"),Object(o.b)("p",null,"Use the ",Object(o.b)("inlineCode",{parentName:"p"},"preventBodyScrolling")," prop to disable scrolling outside the dialog."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane paddingY='40vh'>\n      <Dialog\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        preventBodyScrolling\n      >\n        Scroll-locked body\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n")),Object(o.b)(i.a,{of:"Dialog",mdxType:"PropsTable"}))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-components-dialog-mdx-f188f579d575979684b1.js.map