{"version":3,"sources":["webpack:///./src/pages/components/dialog.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,4BAAW,0BAAYC,WAAW,KAAvB,UAAX,qKAEA,qCACA,6JAEA,0OAGA,qCACA,qBAAG,+BAAGA,WAAW,KAAQ,CACrB,KAAQ,oEADT,eAAH,gFAGA,8BACE,iBAAGA,WAAW,cAAd,2KAEiC,+BAAGA,WAAW,KAAQ,CACnD,KAAQ,+CADqB,uDAFjC,uEAOF,0CACA,uCAAsB,0BAAYA,WAAW,KAAvB,UAAtB,sCAA+G,0BAAYA,WAAW,KAAvB,UAA/G,4FAEA,+HAA8G,0BAAYA,WAAW,KAAvB,UAA9G,qDAC6C,0BAAYA,WAAW,KAAvB,UAD7C,KAEA,gDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qbAmBL,sDACA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,0DAAwH,0BAAYA,WAAW,KAAvB,UAAxH,YACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mdAoBL,kEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yzBAgCL,4CACA,6OAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kcAkBL,4CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0oBAyBL,+CACA,gCAAe,0BAAYA,WAAW,KAAvB,aAAf,qFAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,maAmBL,+CACA,gCAAe,0BAAYA,WAAW,KAAvB,aAAf,8FAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wYAkBL,0DACA,gCAAe,0BAAYA,WAAW,KAAvB,aAAf,KAA0E,0BAAYA,WAAW,KAAvB,aAA1E,iDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kbAmBL,6EACA,gCAAe,0BAAYA,WAAW,KAAvB,wBAAf,kDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oaAkBL,YAAC,IAAD,CAAYC,GAAG,SAASF,QAAQ,gBAKpCH,EAAWM,gBAAiB","file":"component---src-pages-components-dialog-mdx-f188f579d575979684b1.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{` component is used to show content on top of an overlay.\nIt blocks any interaction with the page — until the overlay is clicked, or a close action is triggered.`}</p>\n    <h3>{`When to use`}</h3>\n    <p>{`When you require your user to interact with you app and\ndon’t want your users to jump to a different page and break their workflow.`}</p>\n    <p>{`You should also use a dialog in cases where you need to ask for confirmation\nfrom the user before doing a lengthy or dangerous action.\nThis could be a deletion of some sorts or initiating a lengthy download.`}</p>\n    <h3>{`Terminology`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://blueprintjs.com/docs/versions/2/#core/components/dialog\"\n      }}>{`BlueprintJS`}</a>{` pointed out in their documentation that “modal” is a misnomer for “dialog”.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`The term “modal” is sometimes used to mean “dialog”, but this is a misnomer.\nModal is an adjective that describes parts of a UI.\nAn element is considered modal if it `}<a parentName=\"p\" {...{\n          \"href\": \"https://en.wikipedia.org/wiki/Modal_window\"\n        }}>{`blocks interaction with the rest of the application`}</a>{`.\nWe use the term “dialog” to avoid confusion with the adjective.`}</p>\n    </blockquote>\n    <h3>{`Focus Management`}</h3>\n    <p>{`When opening a `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{`, focus will be brought inside the `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{`\nWhen using both the cancel and confirm button, the cancel button will get focus first.`}</p>\n    <p>{`When closing the Dialog, focus will be brought back to the element that was focused before opening the `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{`.\nThis is normally the button that triggered the `}<inlineCode parentName=\"p\">{`Dialog`}</inlineCode>{`.`}</p>\n    <h2>{`Default dialog example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title=\"Dialog title\"\n        onCloseComplete={() => setState({ isShown: false })}\n        confirmLabel=\"Custom Label\"\n      >\n        Dialog content\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Default with a danger intent`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`intent`}</inlineCode>{` prop determines the appearance of the confirm button, `}<inlineCode parentName=\"p\">{`danger`}</inlineCode>{` is red.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title=\"Danger intent\"\n        intent=\"danger\"\n        onCloseComplete={() => setState({ isShown: false })}\n        confirmLabel=\"Delete Something\"\n      >\n        Dialog content\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Confirm button with loading confirmation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component\n  initialState={{ isShown: false, isLoading: false }}\n  didUpdate={({ state, setState }) => {\n    if (state.isLoading === true) {\n      window.setTimeout(() => {\n        setState({\n          isShown: false\n        })\n      }, 2000)\n    }\n  }}\n>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title=\"Loading confirmation\"\n        onCloseComplete={() => setState({ isShown: false, isLoading: false })}\n        isConfirmLoading={state.isLoading}\n        onConfirm={() => setState({ isLoading: true })}\n        confirmLabel={state.isLoading ? 'Loading...' : 'Confirm Loading'}\n      >\n        Dialog content\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Internal scrolling`}</h2>\n    <p>{`When content makes the dialog height greater than the available space in the viewport,\nthe content area will become scrollable\nIt will add a symmetric offset on the top and bottom — based on the topOffset prop.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title=\"Internal scrolling\"\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        <Pane height={1800} width=\"100%\" backgroundColor=\"#ddd\" />\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Self managed close`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title=\"Self managed close\"\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        {({ close }) => (\n          <Pane>\n            <Paragraph>Manage your own buttons and close interaction</Paragraph>\n            <Button marginTop={16} onClick={close}>\n              Self Managed Close\n            </Button>\n          </Pane>\n        )}\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Remove default footer`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`hasFooter`}</inlineCode>{` prop to show or hide the footer.\nThis will hide the confirm and cancel buttons.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        title=\"No footer\"\n        onCloseComplete={() => setState({ isShown: false })}\n        hasFooter={false}\n      >\n        No footer\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Remove default header`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`hasHeader`}</inlineCode>{` prop to show or hide the header.\nThis will hide both the close icon button as the title.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        hasHeader={false}\n      >\n        No header\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Remove default footer and header`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`hasFooter`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`hasHeader`}</inlineCode>{` props to show or hide the footer and header.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane>\n      <Dialog\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        hasFooter={false}\n        hasHeader={false}\n      >\n        Completely custom dialog\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Preserve scroll position and prevent body scrolling`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`preventBodyScrolling`}</inlineCode>{` prop to disable scrolling outside the dialog.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <Pane paddingY='40vh'>\n      <Dialog\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        preventBodyScrolling\n      >\n        Scroll-locked body\n      </Dialog>\n\n      <Button onClick={() => setState({ isShown: true })}>Show Dialog</Button>\n    </Pane>\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"Dialog\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}