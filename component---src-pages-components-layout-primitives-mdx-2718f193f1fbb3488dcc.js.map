{"version":3,"sources":["webpack:///./src/pages/components/layout-primitives.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"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","file":"component---src-pages-components-layout-primitives-mdx-2718f193f1fbb3488dcc.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` components are one of the most important components in Evergreen.\nThey are used as primitives to construct layouts and compose components.\nIn most cases you can use a `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` instead of a `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` element.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` components map almost directly to the `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` from `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/segmentio/ui-box\"\n      }}><inlineCode parentName=\"a\">{`ui-box`}</inlineCode></a>{`.\nThe `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component is a UI Primitive component that is used as the base of many components in Evergreen.`}</p>\n    <p>{`Besides the `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` component, most other components use `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` as well.`}</p>\n    <h2>{`What is a React UI Primitive?`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component is a base component or \"UI primitive\" for creating layouts and composing components.\nMany components within Evergreen use the `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component instead of a element such as `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` component is useful because it helps with 3 common use cases`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Create layouts without helper classes.`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Define components without worrying about CSS.`}</strong></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Override single properties when using components.`}</strong></li>\n    </ul>\n    <h3>{`You don’t need `}<inlineCode parentName=\"h3\">{`className`}</inlineCode></h3>\n    <p>{`In Evergreen most of the time you don’t deal with CSS classes through the `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` property.\nInstead, you write CSS properties directly onto your Evergreen components —\nin most cases it will just work.`}</p>\n    <p><em parentName=\"p\">{`If you know what you are doing and do need to use CSS directly, be aware that mixing\nEvergreen with regular CSS might give you unexpected results.`}</em></p>\n    <h4>{`When to use inline styles?`}</h4>\n    <p>{`In some cases you still want to use inline styles.\nThe most common use cases is when you are animating a CSS property and the value is always different.`}</p>\n    <h2>{`Creating layouts with Pane`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` component to create your layouts.\nMost CSS properties are supported on the `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { Pane, Text } from 'evergreen-ui'\n\n<Pane\n  height={120}\n  width={240}\n  display=\"flex\"\n  alignItems=\"center\"\n  justifyContent=\"center\"\n  border=\"default\"\n>\n  <Text>Pane</Text>\n</Pane>\n\n`}</code></pre>\n    <h2>{`Override single properties when using Evergreen components`}</h2>\n    <p>{`Most components in Evergreen use a `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` under the hood.\nTo add spacing, or layout properties, pass the properties straight to the component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { Pane, Button, Text, Heading } from 'evergreen-ui'\n\n<Pane display=\"flex\" padding={16} background=\"tint2\" borderRadius={3}>\n  <Pane flex={1} alignItems=\"center\" display=\"flex\">\n    <Heading size={600}>Left Aligned</Heading>\n  </Pane>\n  <Pane>\n    {/* Below you can see the marginRight property on a Button. */}\n    <Button marginRight={16}>Button</Button>\n    <Button appearance=\"primary\">Primary Button</Button>\n  </Pane>\n</Pane>\n`}</code></pre>\n    <h2>{`Use the height property to resize components`}</h2>\n    <p>{`In most cases in Evergreen you can use the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` property on components to change the size\nof a component. The text styles and padding will adjust based on the height you pass.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { Pane, Button, TextInput } from 'evergreen-ui'\n\n<Pane>\n  <TextInput width=\"100%\" height={48} placeholder=\"Change my height to fit your needs.\" />\n  <Button height={48} appearance=\"primary\" marginTop={16}>Big Button</Button>\n</Pane>\n`}</code></pre>\n    <h3>{`Recommendation: Use the 8px major scale grid`}</h3>\n    <p>{`We recommend using values for heights, widths, margins, paddings that are always divisible by `}<inlineCode parentName=\"p\">{`8`}</inlineCode>{`.\nWithin Evergreen we call this the major scale.`}</p>\n    <h4>{`Evergreen exports a utility called `}<inlineCode parentName=\"h4\">{`majorScale`}</inlineCode>{` to help conform to the 8px major scale.`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`majorScale(1) => 8`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`majorScale(2) => 16`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`majorScale(3) => 24`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`majorScale(4) => 32`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`majorScale(5) => 40`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { majorScale, Button } from 'evergreen-ui'\n\n<Button height={majorScale(5)}>Big Button</Button>\n`}</code></pre>\n    <h4>{`Use the 4px minor scale grid for values under 40px`}</h4>\n    <p>{`We recommend only using the 4px grid for values under `}<inlineCode parentName=\"p\">{`40`}</inlineCode>{`.\nTry making your designs work with the major scale first before using the minor scale.\nWe recommend using the minor scale primarily for spacing only when the major scale is too much.`}</p>\n    <p>{`For example: `}<inlineCode parentName=\"p\">{`4`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`12`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`20`}</inlineCode>{` are fine to use.\nBut avoid using `}<inlineCode parentName=\"p\">{`52`}</inlineCode>{`.`}</p>\n    <h4>{`Evergreen exports a utility called `}<inlineCode parentName=\"h4\">{`minorScale`}</inlineCode>{` to help conform to the 4px minor scale.`}</h4>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minorScale(1) => 4`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minorScale(3) => 12`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minorScale(5) => 20`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minorScale(7) => 28`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`minorScale(9) => 36`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { minorScale, Button } from 'evergreen-ui'\n\n<Pane>\n  <Button marginRight={minorScale(3)}>Button</Button>\n  <Button>Button</Button>\n</Pane>\n`}</code></pre>\n    <h2>{`Responsive layouts`}</h2>\n    <p>{`Currently there is no opinionated way to construct responsive layouts in Evergreen.\nIn the case of responsive layouts you might want to simply use a div with a class name and use breakpoints in CSS — or potentially a CSS-in-JS solution.`}</p>\n    <p>{`In the case when you need to pass properties to a Evergreen component based on the viewport,\nyou can try something like react-component-queries.`}</p>\n    <h2>{`Never pass a string of text as direct children`}</h2>\n    <p><inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` don’t have text styles applied to them.\nAlways use a `}<inlineCode parentName=\"p\">{`Text`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Heading`}</inlineCode>{` or other typography component as children to Panes & Cards.`}</p>\n    <h1>{`Pane component`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` component maps almost directly to the `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`ui-box`}</inlineCode>{`.\nThis means you can pass everything to `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` that you can pass to `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{`.\nRead more above to learn about this.`}</p>\n    <p>{`Because the `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` component directly maps to a `}<inlineCode parentName=\"p\">{`Box`}</inlineCode>{` you can pass almost any CSS property directly to the React component.`}</p>\n    <h2>{`Basic `}<inlineCode parentName=\"h2\">{`Pane`}</inlineCode>{` example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane\n  is=\"section\"\n  innerRef={(ref) => console.log(ref)}\n  background=\"tint2\"\n  border=\"muted\"\n  marginLeft={12}\n  marginY={24}\n  paddingTop={12}\n  paddingX={40}\n  width={120}\n  height={120}\n  cursor=\"help\"\n  onClick={() => alert('Works just like expected')}\n/>\n`}</code></pre>\n    <h2>{`Elevation styles`}</h2>\n    <p><inlineCode parentName=\"p\">{`Panes`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Cards`}</inlineCode>{` have a `}<inlineCode parentName=\"p\">{`elevation`}</inlineCode>{` property to give the\ncomponent a box shadow and visually elevate it from the page.`}</p>\n    <p>{`Most commonly you will be only using `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane clearfix>\n  <Pane\n    elevation={0}\n    float=\"left\"\n    backgroundColor=\"white\"\n    width={200}\n    height={120}\n    margin={24}\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    flexDirection=\"column\"\n  >\n    <Text>Elevation 0</Text>\n    <Text size={300}>Flat Panes</Text>\n  </Pane>\n  <Pane\n    elevation={1}\n    float=\"left\"\n    width={200}\n    height={120}\n    margin={24}\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    flexDirection=\"column\"\n  >\n    <Text>Elevation 1</Text>\n    <Text size={300}>Floating Panes</Text>\n  </Pane>\n</Pane>\n`}</code></pre>\n    <h3>{`All elevation options`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Pane clearfix>\n  <Pane\n    elevation={0}\n    float=\"left\"\n    backgroundColor=\"white\"\n    width={200}\n    height={120}\n    margin={24}\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    flexDirection=\"column\"\n  >\n    <Text>Elevation 0</Text>\n    <Text size={300}>Flat Panes</Text>\n  </Pane>\n  <Pane\n    elevation={1}\n    float=\"left\"\n    width={200}\n    height={120}\n    margin={24}\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    flexDirection=\"column\"\n  >\n    <Text>Elevation 1</Text>\n    <Text size={300}>Floating Panes</Text>\n  </Pane>\n  <Pane\n    elevation={2}\n    float=\"left\"\n    width={200}\n    height={120}\n    margin={24}\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    flexDirection=\"column\"\n  >\n    <Text>Elevation 2</Text>\n    <Text size={300}>Popovers and Dropdowns</Text>\n  </Pane>\n  <Pane\n    elevation={3}\n    float=\"left\"\n    width={200}\n    height={120}\n    margin={24}\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    flexDirection=\"column\"\n  >\n    <Text>Elevation 3</Text>\n    <Text size={300}>Toasts</Text>\n  </Pane>\n  <Pane\n    elevation={4}\n    float=\"left\"\n    width={200}\n    height={120}\n    margin={24}\n    display=\"flex\"\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    flexDirection=\"column\"\n  >\n    <Text>Elevation 4</Text>\n    <Text size={300}>Dialog</Text>\n  </Pane>\n</Pane>\n`}</code></pre>\n    <h2>{`Background colors`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`background`}</inlineCode>{` property on a `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` is special.\nYou have access to all of the colors defined in the theme objects.`}</p>\n    <h3>{`Use `}<inlineCode parentName=\"h3\">{`tint1`}</inlineCode>{` and `}<inlineCode parentName=\"h3\">{`tint2`}</inlineCode>{` for slight gray backgrounds`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane>\n  <Pane background=\"tint1\" padding={24} marginBottom={16}><Text>tint1</Text></Pane>\n  <Pane background=\"tint2\" padding={24} ><Text>tint2</Text></Pane>\n</Pane>\n`}</code></pre>\n    <h3>{`All possible options for the background color`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<ThemeConsumer>\n  {theme => (\n    <Pane clearfix>\n      {Object.keys(theme.colors.background).map(background => (\n        <Pane\n          key={background}\n          background={background}\n          float=\"left\"\n          width={120}\n          height={120}\n          margin={24}\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Text color=\"default\">{background}</Text>\n        </Pane>\n      ))}\n    </Pane>\n  )}\n</ThemeConsumer>\n`}</code></pre>\n    <h2>{`Border colors`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`border`}</inlineCode>{` property on a `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` is special.\nYou have access to all of the colors defined in the theme objects.`}</p>\n    <p>{`Possible values are `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`muted`}</inlineCode>{`. If you pass the `}<inlineCode parentName=\"p\">{`border`}</inlineCode>{` property as a boolean\nit will use the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` option.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane clearfix>\n  <Pane border width={120} height={80} marginRight={16} float=\"left\" />\n  <Pane border=\"default\" width={120} height={80} marginRight={16} float=\"left\" />\n  <Pane border=\"muted\" width={120} height={80} marginRight={16} float=\"left\" />\n</Pane>\n`}</code></pre>\n    <p>{`All border sides are supported on a `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane borderTop borderRight borderLeft borderBottom width={120} height={80} />\n`}</code></pre>\n    <h3>{`All possible options for the border color`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<ThemeConsumer>\n  {theme => (\n    <Pane clearfix>\n      {Object.keys(theme.colors.border).map(borderColor => (\n        <Pane key={borderColor} overflow=\"auto\">\n          <Pane\n            borderTop={borderColor}\n            float=\"left\"\n            width={160}\n            height={120}\n            margin={24}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Text color=\"default\">borderTop: {borderColor}</Text>\n          </Pane>\n          <Pane\n            borderRight={borderColor}\n            float=\"left\"\n            width={160}\n            height={120}\n            margin={24}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Text color=\"default\">borderRight: {borderColor}</Text>\n          </Pane>\n          <Pane\n            borderBottom={borderColor}\n            float=\"left\"\n            width={160}\n            height={120}\n            margin={24}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Text color=\"default\">borderBottom: {borderColor}</Text>\n          </Pane>\n          <Pane\n            borderLeft={borderColor}\n            float=\"left\"\n            width={160}\n            height={120}\n            margin={24}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Text color=\"default\">borderLeft: {borderColor}</Text>\n          </Pane>\n        </Pane>\n      ))}\n    </Pane>\n  )}\n</ThemeConsumer>\n`}</code></pre>\n    <PropsTable of=\"Pane\" mdxType=\"PropsTable\" />\n    <h1>{`Card component`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` component is exactly the same as the `}<inlineCode parentName=\"p\">{`Pane`}</inlineCode>{` component.\nThe only difference is that the `}<inlineCode parentName=\"p\">{`Card`}</inlineCode>{` has a `}<inlineCode parentName=\"p\">{`borderRadius`}</inlineCode>{` by default.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}