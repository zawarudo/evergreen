(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{963:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return b}));t(5),t(6),t(4),t(7),t(2),t(0);var a=t(120),o=t(940),l=t(941);var s={},i={_frontmatter:s},u=o.a;function b(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,["components"]);return Object(a.b)(u,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",null,"Introduction"),Object(a.b)("p",null,"A segmented control is a set of two or more button segments.\nWithin the control, all segments are equal in width.\nA segmented control is often used to switch between views of some data.\nUse a segmented control only when the options are predefined and are at most 4 options."),Object(a.b)("h2",null,"Design guidelines"),Object(a.b)("p",null,"By default the segmented control has a height of ",Object(a.b)("inlineCode",{parentName:"p"},"32px")," (the same as a button).\nIt is possible to change this to any height and the text style and spacing will adjust.\nYou should however keep things on the ",Object(a.b)("inlineCode",{parentName:"p"},"8px")," grid or in some cases the ",Object(a.b)("inlineCode",{parentName:"p"},"4px")," grid.\nYou should only need the following recommended heights."),Object(a.b)("h3",null,"Recommended heights"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"24px"),Object(a.b)("li",{parentName:"ul"},"32px â€” default height"),Object(a.b)("li",{parentName:"ul"},"36px"),Object(a.b)("li",{parentName:"ul"},"40px")),Object(a.b)("h2",null,"Basic"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component\n  initialState={{\n    options: [\n      { label: 'Hourly', value: 'hourly' },\n      { label: 'Daily', value: 'daily' },\n      { label: 'Monthly', value: 'monthly' },\n    ],\n    value: 'hourly',\n  }}\n>\n  {({ state, setState }) => (\n    <SegmentedControl\n      width={240}\n      options={state.options}\n      value={state.value}\n      onChange={value => setState({ value })}\n    />\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Small SegmentedControl example"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"SegmentedControl")," will automatically chose the text style to match whatever height is passed."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component\n  initialState={{\n    options: [{ label: 'On', value: 'on' }, { label: 'Off', value: 'off' }],\n    value: 'on',\n  }}\n>\n  {({ state, setState }) => (\n    <SegmentedControl\n      name=\"switch\"\n      width={80}\n      height={24}\n      options={state.options}\n      value={state.value}\n      onChange={value => setState({ value })}\n    />\n  )}\n</Component>\n")),Object(a.b)(l.a,{of:"SegmentedControl",mdxType:"PropsTable"}))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-components-segmented-control-mdx-a1c05b918c8637c44046.js.map