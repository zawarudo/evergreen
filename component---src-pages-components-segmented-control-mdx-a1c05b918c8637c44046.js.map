{"version":3,"sources":["webpack:///./src/pages/components/segmented-control.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,6SAIA,2CACA,yEAAwD,0BAAYC,WAAW,KAAvB,QAAxD,4JAEoC,0BAAYA,WAAW,KAAvB,OAFpC,8BAEkH,0BAAYA,WAAW,KAAvB,OAFlH,mEAIA,6CACA,sBACE,kBAAIA,WAAW,MAAf,QACA,kBAAIA,WAAW,MAAf,yBACA,kBAAIA,WAAW,MAAf,QACA,kBAAIA,WAAW,MAAf,SAEF,+BACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gbAsBL,wDACA,4BAAW,0BAAYA,WAAW,KAAvB,oBAAX,gFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oYAoBL,YAAC,IAAD,CAAYC,GAAG,mBAAmBF,QAAQ,gBAK9CH,EAAWM,gBAAiB","file":"component---src-pages-components-segmented-control-mdx-a1c05b918c8637c44046.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`A segmented control is a set of two or more button segments.\nWithin the control, all segments are equal in width.\nA segmented control is often used to switch between views of some data.\nUse a segmented control only when the options are predefined and are at most 4 options.`}</p>\n    <h2>{`Design guidelines`}</h2>\n    <p>{`By default the segmented control has a height of `}<inlineCode parentName=\"p\">{`32px`}</inlineCode>{` (the same as a button).\nIt is possible to change this to any height and the text style and spacing will adjust.\nYou should however keep things on the `}<inlineCode parentName=\"p\">{`8px`}</inlineCode>{` grid or in some cases the `}<inlineCode parentName=\"p\">{`4px`}</inlineCode>{` grid.\nYou should only need the following recommended heights.`}</p>\n    <h3>{`Recommended heights`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`24px`}</li>\n      <li parentName=\"ul\">{`32px â€” default height`}</li>\n      <li parentName=\"ul\">{`36px`}</li>\n      <li parentName=\"ul\">{`40px`}</li>\n    </ul>\n    <h2>{`Basic`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component\n  initialState={{\n    options: [\n      { label: 'Hourly', value: 'hourly' },\n      { label: 'Daily', value: 'daily' },\n      { label: 'Monthly', value: 'monthly' },\n    ],\n    value: 'hourly',\n  }}\n>\n  {({ state, setState }) => (\n    <SegmentedControl\n      width={240}\n      options={state.options}\n      value={state.value}\n      onChange={value => setState({ value })}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Small SegmentedControl example`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SegmentedControl`}</inlineCode>{` will automatically chose the text style to match whatever height is passed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component\n  initialState={{\n    options: [{ label: 'On', value: 'on' }, { label: 'Off', value: 'off' }],\n    value: 'on',\n  }}\n>\n  {({ state, setState }) => (\n    <SegmentedControl\n      name=\"switch\"\n      width={80}\n      height={24}\n      options={state.options}\n      value={state.value}\n      onChange={value => setState({ value })}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"SegmentedControl\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}