{"version":3,"sources":["webpack:///./src/pages/components/select.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,gFACA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,mDAAmH,0BAAYA,WAAW,MAAvB,UAAnH,aACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,eAApB,0FAEF,gCACA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,oLAGA,4CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yJAOL,0CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6SAWL,oCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wHAOL,sCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uHAOL,uCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mIAOL,qCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qJAOL,YAAC,IAAD,CAAYC,GAAG,SAASF,QAAQ,eAChC,qCACA,+CACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,iBADZ,mMAUL,wDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qLAUL,mDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2OAYL,uCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6QAaL,kEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qRAaL,0CACA,4BAAW,0BAAYA,WAAW,KAAvB,eAAX,sCAAyG,0BAAYA,WAAW,KAAvB,SAAzG,mBACE,0BAAYA,WAAW,KAAvB,kBADF,kDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6aAqBTJ,EAAWM,gBAAiB","file":"component---src-pages-components-select-mdx-8b8bf9f888221339ae9a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`Evergreen exports two components to create text inputs:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Select`}</strong>{`: base text input component. Directly maps to a `}<inlineCode parentName=\"li\">{`select`}</inlineCode>{` element.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`SelectField`}</strong>{`: combines a label, select and validation message in one. Used for traditional forms.`}</li>\n    </ul>\n    <h1>{`Select`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Select`}</inlineCode>{` component is a styled wrapper around a native select element,\nwhich allows selection of one item from a dropdown list.\nAnytime you would reach for a native select, use this.`}</p>\n    <h2>{`Uncontrolled usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Select onChange={event => alert(event.target.value)}>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</Select>\n`}</code></pre>\n    <h2>{`Controlled usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ value: 'foo' }}>\n  {({ state, setState }) => (\n    <Select value={state.value} onChange={event => setState({ value: event.target.value })}>\n      <option value=\"foo\" selected>Foo</option>\n      <option value=\"bar\">Bar</option>\n    </Select>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Full width`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Select width=\"100%\">\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</Select>\n`}</code></pre>\n    <h2>{`Custom width`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Select width={240}>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</Select>\n`}</code></pre>\n    <h2>{`Change height`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Select width={240} height={40}>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</Select>\n`}</code></pre>\n    <h2>{`Add margins`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Select width={240} height={40} marginBottom={40}>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</Select>\n`}</code></pre>\n    <PropsTable of=\"Select\" mdxType=\"PropsTable\" />\n    <h1>{`SelectField`}</h1>\n    <h2>{`Label and description`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectField\n  label=\"Default text input field\"\n  description=\"This is a description.\"\n>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</SelectField>\n`}</code></pre>\n    <h2>{`A hint is under the text input`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectField\n  label=\"Default text input field\"\n  hint=\"This is a hint.\"\n>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</SelectField>\n`}</code></pre>\n    <h2>{`Required text input field`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectField\n  id=\"ids-are-optional\"\n  label=\"A required text input field\"\n  required\n  description=\"This is a description.\"\n>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</SelectField>\n`}</code></pre>\n    <h2>{`Invalid field`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectField\n  isInvalid\n  required\n  label=\"A required text input field\"\n  description=\"This is a description.\"\n  validationMessage=\"This field is required\"\n>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</SelectField>\n`}</code></pre>\n    <h2>{`Validation message without invalid input`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectField\n  isInvalid={false}\n  required\n  label=\"A required text input field\"\n  description=\"This is a description.\"\n  validationMessage=\"This field is required\"\n>\n  <option value=\"foo\" selected>Foo</option>\n  <option value=\"bar\">Bar</option>\n</SelectField>\n`}</code></pre>\n    <h2>{`Controlled usage`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectField`}</inlineCode>{` component works the same as using `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` directly.\nUse `}<inlineCode parentName=\"p\">{`e.target.value`}</inlineCode>{` to get the value of the component on change. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ value: 'foo' }}>\n  {({ state, setState }) => (\n    <SelectField\n      label=\"A controlled text input field\"\n      required\n      description=\"This is a description.\"\n      value={state.value}\n      onChange={e => setState({ value: e.target.value })}\n    >\n      <option value=\"foo\" selected>Foo</option>\n      <option value=\"bar\">Bar</option>\n    </SelectField>\n  )}\n</Component>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}