{"version":3,"sources":["webpack:///./src/pages/components/select-menu.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"6PAQO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,4BAAW,0BAAYC,WAAW,KAAvB,cAAX,wLAEA,gDACA,4BAAW,0BAAYA,WAAW,KAAvB,cAAX,yBAA2F,0BAAYA,WAAW,KAAvB,WAA3F,wBACO,0BAAYA,WAAW,KAAvB,2BADP,0DAEA,qCACA,4BAAW,0BAAYA,WAAW,KAAvB,cAAX,uFACmB,0BAAYA,WAAW,KAAvB,YADnB,+BAEA,yCACA,4BAAW,0BAAYA,WAAW,KAAvB,cAAX,oKAGA,gDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,cACb,WAAc,SACd,QAAU,IAHT,0FAWL,8CACA,oFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sdAkBL,iDACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBAApB,yCACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBAApB,6CAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ugBAoBL,qDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8iBAsBL,4DACA,6CACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,uBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,yBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,2BAEtB,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qfAmBL,oCACA,iGAAgF,0BAAYA,WAAW,KAAvB,aAAhF,kJAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uRAcL,oDAAmC,0BAAYA,WAAW,KAAvB,gBAAnC,4BACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oSAcL,yCACA,yEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kbAYL,2DACA,+EACA,wKAEE,0BAAYA,WAAW,KAAvB,cAFF,4CAGA,gGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,quDAsDL,gDACA,2EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ioBAyBL,iDACA,2JACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ufAoBL,8CACA,mGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6yCA8CL,oEACA,mGAAkF,0BAAYA,WAAW,KAAvB,qBAAlF,QAAwJ,0BAAYA,WAAW,KAAvB,cAAxJ,WACA,iFAAgE,+BAAGA,WAAW,KAAQ,CAClF,KAAQ,mDADoD,SAAhE,QAE2B,0BAAYA,WAAW,KAAvB,QAF3B,KAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+hBAoBL,YAAC,IAAD,CAAYC,GAAG,aAAaF,QAAQ,gBAKxCH,EAAWM,gBAAiB","file":"component---src-pages-components-select-menu-mdx-3dc10b406417a61c79bb.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport SyntaxHighlighter from 'components/SyntaxHighlighter';\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` component is an advanced interaction pattern which allows selection of multiple items from a dropdown list.\nIt can be used as a substitute for the native multiple select element.`}</p>\n    <h3>{`Implementation details`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` builds on top of the `}<inlineCode parentName=\"p\">{`Popover`}</inlineCode>{` component\nand uses `}<inlineCode parentName=\"p\">{`react-tiny-virtual-list`}</inlineCode>{` for the rendering of the virtualized list of options.`}</p>\n    <h2>{`Multiselect`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` is unopinionated in how many items are selected in the list.\nPass an array to the `}<inlineCode parentName=\"p\">{`selected`}</inlineCode>{` prop to select more items.`}</p>\n    <h2>{`Close on select`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SelectMenu`}</inlineCode>{` by default will stay open when an option is selected.\nThis can be configured so that the menu closes on selection.\nThis will not apply for Multiselect menus.`}</p>\n    <h2>{`Options prop structure`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"static\",\n        \"static\": true\n      }}>{`const options = [\n  {\n    label: 'String',\n    value: 'String or Number'\n  }\n]\n`}</code></pre>\n    <h2>{`Single selected item`}</h2>\n    <p>{`This example shows basic usage with a single selected item.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Remove title and filter`}</h2>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasFilter={false}`}</inlineCode>{`:  to remove the search input filter.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`hasTitle={false}`}</inlineCode>{`:  to remove the title from the popover.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      hasTitle={false}\n      hasFilter={false}\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Change the height and width`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      height={140}\n      width={180}\n      hasTitle={false}\n      hasFilter={false}\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Change the position of the popover`}</h2>\n    <p>{`Available positions:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.TOP`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.TOP_LEFT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.TOP_RIGHT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.BOTTOM`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.BOTTOM_LEFT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.BOTTOM_RIGHT`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      position={Position.TOP}\n      title=\"Select name\"\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Empty view`}</h2>\n    <p>{`It's possible to display a custom empty view instead of options list via `}<inlineCode parentName=\"p\">{`emptyView`}</inlineCode>{`, when there are no properties supplied.\nNote that empty view won't be shown when options are being filtered and there are no search results.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu\n  title=\"Empty view\"\n  options={[]}\n  emptyView={(\n    <Pane height=\"100%\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <Text size={300}>No options found</Text>\n    </Pane>\n  )}\n>\n  <Button>Select option...</Button>\n</SelectMenu>\n`}</code></pre>\n    <p>{`It's also possible to close `}<inlineCode parentName=\"p\">{`<SelectMenu>`}</inlineCode>{` from within empty view:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu\n  title=\"Empty view\"\n  options={[]}\n  emptyView={({ close }) => (\n    <Pane height=\"100%\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n      <Button onClick={close}>Close</Button>\n    </Pane>\n  )}\n>\n  <Button>Select option...</Button>\n</SelectMenu>\n`}</code></pre>\n    <h2>{`Menu with icons`}</h2>\n    <p>{`It's possible to include icons in the menu list.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<SelectMenu\n  title=\"Options with icons\"\n  options={[\n    { label: 'Apple', value: 'Apple', icon: 'https://upload.wikimedia.org/wikipedia/commons/d/d2/Malus-Boskoop_organic.jpg' },\n    { label: 'Banana', value: 'Banana', icon: 'https://upload.wikimedia.org/wikipedia/commons/thumb/4/44/Bananas_white_background_DS.jpg/2560px-Bananas_white_background_DS.jpg' },\n  ]}\n>\n  <Button>Select option...</Button>\n</SelectMenu>\n`}</code></pre>\n    <h2>{`Multiselect with deselect example`}</h2>\n    <p>{`This example shows usage with multiple selected items.`}</p>\n    <p>{`This pattern is only an example.\nSelected values and the formatting of their names should be managed wherever you choose to manage state.\nThe `}<inlineCode parentName=\"p\">{`onDeselect`}</inlineCode>{` method is provided to assist with this.`}</p>\n    <p>{`As users click on selected values to remove them, you can update state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component\n  initialState={{\n    options: ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label })),\n    selected: []\n  }}\n>\n  {({ state, setState }) => (\n    <SelectMenu\n      isMultiSelect\n      title=\"Select multiple names\"\n      options={state.options}\n      selected={state.selected}\n      onSelect={item => {\n        const selected = [...state.selected, item.value]\n        const selectedItems = selected\n        const selectedItemsLength = selectedItems.length\n        let selectedNames = ''\n        if (selectedItemsLength === 0) {\n          selectedNames = ''\n        } else if (selectedItemsLength === 1) {\n          selectedNames = selectedItems.toString()\n        } else if (selectedItemsLength > 1) {\n          selectedNames = selectedItemsLength.toString() + ' selected...'\n        }\n        setState({\n          selected,\n          selectedNames\n        })\n      }}\n      onDeselect={item => {\n        const deselectedItemIndex = state.selected.indexOf(item.value)\n        const selectedItems = state.selected.filter(\n          (_item, i) => i !== deselectedItemIndex\n        )\n        const selectedItemsLength = selectedItems.length\n        let selectedNames = ''\n        if (selectedItemsLength === 0) {\n          selectedNames = ''\n        } else if (selectedItemsLength === 1) {\n          selectedNames = selectedItems.toString()\n        } else if (selectedItemsLength > 1) {\n          selectedNames = selectedItemsLength.toString() + ' selected...'\n        }\n        setState({ selected: selectedItems, selectedNames })\n      }}\n    >\n      <Button>{state.selectedNames || 'Select multiple...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`onFilterChange example`}</h2>\n    <p>{`This example shows basic usage with onFocusChange.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <Pane>\n    <Pane marginBottom={8}>\n      <Text>Filter value: {state.filter}</Text>\n    </Pane>\n    <SelectMenu\n      title=\"Select name\"\n      onFilterChange={filter => setState({filter})}\n      options={\n        ['Apple', 'Apricot', 'Banana', 'Cherry', 'Cucumber']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n    </Pane>\n  )}\n\n</Component>\n`}</code></pre>\n    <h2>{`Disabled option example`}</h2>\n    <p>{`This example shows basic usage for disabling some options. Options that are disabled cannot be clicked and their labels are muted.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <Pane>\n    <SelectMenu\n      title=\"Select Option\"\n      options={\n        [{ label: \"Disabled\", value: \"disabled\", disabled: true }, { label: \"Not Disabled\", value: \"not-disabled\" }]\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n    </Pane>\n  )}\n\n</Component>\n`}</code></pre>\n    <h2>{`Custom Title Example`}</h2>\n    <p>{`This example shows how one should use titleView to pass in a custom title.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <Pane>\n    <SelectMenu\n      title=\"Select Option\"\n      tooltipContent=\"Choose one of the options below.\"\n      titleView={({ close, title, headerHeight }) => {\n        return (\n          <Pane\n            display=\"flex\"\n            alignItems=\"center\"\n            borderBottom=\"default\"\n            padding={8}\n            height={headerHeight}\n            boxSizing=\"border-box\"\n          >\n            <Pane flex=\"1\" display=\"flex\" alignItems=\"center\">\n              <Heading size={400}>{title}</Heading>\n                <Tooltip content=\"Pick one of the options below\">\n                  <HelpIcon size={12} marginLeft={4} />\n                </Tooltip>\n            </Pane>\n            <IconButton\n              icon=\"cross\"\n              appearance=\"minimal\"\n              height={24}\n              onClick={close}\n            />\n          </Pane>\n        )\n      }}\n      options={\n        [{ label: \"Option 1\", value: \"option-1\"}, { label: \"Option 2\", value: \"option-2\" }]\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n    </Pane>\n  )}\n\n</Component>\n`}</code></pre>\n    <h2>{`Custom Filter PlaceHolder and Icon Example`}</h2>\n    <p>{`It's possible to change the filter placeholder and filter icon through the `}<inlineCode parentName=\"p\">{`filterPlaceholder`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`filterIcon`}</inlineCode>{` props.`}</p>\n    <p>{`Note that the icon can be one found in Segment's various `}<a parentName=\"p\" {...{\n        \"href\": \"https://evergreen.segment.com/components/icons\"\n      }}>{`icons`}</a>{`, or `}<inlineCode parentName=\"p\">{`none`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ selected: null }}>\n  {({ setState, state }) => (\n    <SelectMenu\n      title=\"Select name\"\n      options={\n        ['Comedy', 'Drama', 'Fantasy', 'Family', 'Action']\n          .map(label => ({ label, value: label }))\n      }\n      selected={state.selected}\n      onSelect={item => setState({ selected: item.value })}\n      filterPlaceholder={\"Choose a genre\"}\n      filterIcon={\"film\"}\n    >\n      <Button>{state.selected || 'Select name...'}</Button>\n    </SelectMenu>\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"SelectMenu\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}