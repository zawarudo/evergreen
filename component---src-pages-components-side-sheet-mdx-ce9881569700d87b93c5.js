(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{966:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return l})),t.d(n,"default",(function(){return r}));t(5),t(6),t(4),t(7),t(2),t(0);var a=t(120),i=t(940),o=t(941);var l={},s={_frontmatter:l},c=i.a;function r(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(a.b)(c,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",null,"Introduction"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," component is a panel overlaying the screen on the right side.\nIt is used to show more details about a certain object or person.\nA ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," is often triggered by clicking a row in a table."),Object(a.b)("h3",null,"Use cases"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Showing a profile view of a user"),Object(a.b)("li",{parentName:"ul"},"Showing detailed information about a transaction (such as a sync or run)"),Object(a.b)("li",{parentName:"ul"},"Showing configuration settings that donâ€˜t need to be accessible by a URL")),Object(a.b)("h3",null,"When not to use a side sheet"),Object(a.b)("p",null,"Side Sheets are a great way to cheat creating a new page.\nAs a general rule of thumb, a ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," should not be used as a replacement\nof a new page when the page needs to be accessible by a URL.\nAvoid showing a ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," based on a URL."),Object(a.b)("h3",null,"Implementation details"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," component does not have any opinion about the contents of the ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet"),".\nIn the examples below are some recipes to make sure usage of the ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," is consistent.\nIt is recommended to compose more opinionated Side Sheets in the consuming application."),Object(a.b)("h3",null,"Side sheets close on"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Backdrop click"),Object(a.b)("li",{parentName:"ul"},"Close icon button click"),Object(a.b)("li",{parentName:"ul"},"Escape key"),Object(a.b)("li",{parentName:"ul"},"The close function being called")),Object(a.b)("h3",null,"Focus management"),Object(a.b)("p",null,"When opening the ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet"),", focus will be brought inside the ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," by looking for elements with ",Object(a.b)("inlineCode",{parentName:"p"},"[autofocus]")," first, ",Object(a.b)("inlineCode",{parentName:"p"},"[tabindex]")," second and ",Object(a.b)("inlineCode",{parentName:"p"},"button")," last."),Object(a.b)("p",null,"When closing the ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet"),", focus will be brought back to the element that was focused before opening the ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet"),".\nThis is normally the button that triggered the ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet"),"."),Object(a.b)("h2",null,"Basic example"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        <Paragraph margin={40}>Basic Example</Paragraph>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Change position"),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"SideSheet")," component can appearn on all side of the screens."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Position.TOP")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Position.RIGHT")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Position.BOTTOM")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Position.LEFT"))),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        position={Position.TOP}\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        <Paragraph margin={40}>Basic Example</Paragraph>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Full featured example"),Object(a.b)("p",null,"Full featured example with a header with a title, subtitle and a tab bar.\nContent is a simple card."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"collapse",collapse:!0}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        containerProps={{\n          display: \'flex\',\n          flex: \'1\',\n          flexDirection: \'column\',\n        }}\n      >\n        <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor="white">\n          <Pane padding={16} borderBottom="muted">\n            <Heading size={600}>Title</Heading>\n            <Paragraph size={400} color="muted">\n              Optional description or sub title\n            </Paragraph>\n          </Pane>\n          <Pane display="flex" padding={8}>\n            <Tablist>\n               {[\'Traits\', \'Event History\', \'Identities\'].map(\n                  (tab, index) => (\n                    <Tab\n                      key={tab}\n                      isSelected={state.selectedIndex === index}\n                      onSelect={() => setState({ selectedIndex: index })}\n                    >\n                      {tab}\n                    </Tab>\n                  )\n                )}\n\n            </Tablist>\n          </Pane>\n        </Pane>\n        <Pane flex="1" overflowY="scroll" background="tint1" padding={16}>\n          <Card\n            backgroundColor="white"\n            elevation={0}\n            height={240}\n            display="flex"\n            alignItems="center"\n            justifyContent="center"\n          >\n            <Heading>Some content</Heading>\n          </Card>\n        </Pane>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n')),Object(a.b)("h2",null,"Title only"),Object(a.b)("p",null,"Example with a header with a title. Content is a simple card."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"collapse",collapse:!0}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        containerProps={{\n          display: \'flex\',\n          flex: \'1\',\n          flexDirection: \'column\',\n        }}\n      >\n        <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor="white">\n          <Pane padding={16}>\n            <Heading size={600}>Title</Heading>\n          </Pane>\n        </Pane>\n        <Pane flex="1" overflowY="scroll" background="tint1" padding={16}>\n          <Card\n            backgroundColor="white"\n            elevation={0}\n            height={240}\n            display="flex"\n            alignItems="center"\n            justifyContent="center"\n          >\n            <Heading>Some content</Heading>\n          </Card>\n        </Pane>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n')),Object(a.b)("h2",null,"Title and subtitle"),Object(a.b)("p",null,"Example with a header with a title and title. Content is a simple card."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"collapse",collapse:!0}),'<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        containerProps={{\n          display: \'flex\',\n          flex: \'1\',\n          flexDirection: \'column\',\n        }}\n      >\n        <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor="white">\n          <Pane padding={16}>\n            <Heading size={600}>Title</Heading>\n            <Paragraph size={400}>\n              Optional description or sub title\n            </Paragraph>\n          </Pane>\n        </Pane>\n        <Pane flex="1" overflowY="scroll" background="tint1" padding={16}>\n          <Card\n            backgroundColor="white"\n            elevation={0}\n            height={240}\n            display="flex"\n            alignItems="center"\n            justifyContent="center"\n          >\n            <Heading>Some content</Heading>\n          </Card>\n        </Pane>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n')),Object(a.b)("h2",null,"Preserve scroll position and prevent body scrolling"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"preventBodyScrolling")," prop to disable scrolling outside the side sheet."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"collapse",collapse:!0}),"<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        preventBodyScrolling\n      >\n        <Paragraph margin={40}>Basic Example</Paragraph>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n")),Object(a.b)(o.a,{of:"SideSheet",mdxType:"PropsTable"}))}r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-components-side-sheet-mdx-ce9881569700d87b93c5.js.map