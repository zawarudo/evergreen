{"version":3,"sources":["webpack:///./src/pages/components/side-sheet.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,4BAAW,0BAAYC,WAAW,KAAvB,aAAX,wIAEA,0BAAYA,WAAW,KAAvB,aAFA,qDAGA,mCACA,sBACE,kBAAIA,WAAW,MAAf,oCACA,kBAAIA,WAAW,MAAf,4EACA,kBAAIA,WAAW,MAAf,6EAEF,sDACA,iHAC4B,0BAAYA,WAAW,KAAvB,aAD5B,uHAGc,0BAAYA,WAAW,KAAvB,aAHd,oBAIA,gDACA,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,kEAAmI,0BAAYA,WAAW,KAAvB,aAAnI,uEAC+D,0BAAYA,WAAW,KAAvB,aAD/D,4GAGA,8CACA,sBACE,kBAAIA,WAAW,MAAf,kBACA,kBAAIA,WAAW,MAAf,2BACA,kBAAIA,WAAW,MAAf,cACA,kBAAIA,WAAW,MAAf,oCAEF,0CACA,yCAAwB,0BAAYA,WAAW,KAAvB,aAAxB,sCAAoH,0BAAYA,WAAW,KAAvB,aAApH,iCAA2M,0BAAYA,WAAW,KAAvB,eAA3M,WAA8Q,0BAAYA,WAAW,KAAvB,cAA9Q,eAAoV,0BAAYA,WAAW,KAAvB,UAApV,UACA,yCAAwB,0BAAYA,WAAW,KAAvB,aAAxB,mFAAiK,0BAAYA,WAAW,KAAvB,aAAjK,qDAC6C,0BAAYA,WAAW,KAAvB,aAD7C,KAEA,uCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wcAkBL,yCACA,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,sDACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,oBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBAEtB,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yeAmBL,+CACA,6HAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,WACd,UAAY,IAHX,2vDA4DL,oCACA,sFACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,WACd,UAAY,IAHX,4kCAyCL,4CACA,gGACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,WACd,UAAY,IAHX,2rCA4CL,6EACA,gCAAe,0BAAYA,WAAW,KAAvB,wBAAf,sDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,WACd,UAAY,IAHX,geAqBL,YAAC,IAAD,CAAYC,GAAG,YAAYF,QAAQ,gBAKvCH,EAAWM,gBAAiB","file":"component---src-pages-components-side-sheet-mdx-ce9881569700d87b93c5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` component is a panel overlaying the screen on the right side.\nIt is used to show more details about a certain object or person.\nA `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` is often triggered by clicking a row in a table.`}</p>\n    <h3>{`Use cases`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Showing a profile view of a user`}</li>\n      <li parentName=\"ul\">{`Showing detailed information about a transaction (such as a sync or run)`}</li>\n      <li parentName=\"ul\">{`Showing configuration settings that donâ€˜t need to be accessible by a URL`}</li>\n    </ul>\n    <h3>{`When not to use a side sheet`}</h3>\n    <p>{`Side Sheets are a great way to cheat creating a new page.\nAs a general rule of thumb, a `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` should not be used as a replacement\nof a new page when the page needs to be accessible by a URL.\nAvoid showing a `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` based on a URL.`}</p>\n    <h3>{`Implementation details`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` component does not have any opinion about the contents of the `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{`.\nIn the examples below are some recipes to make sure usage of the `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` is consistent.\nIt is recommended to compose more opinionated Side Sheets in the consuming application.`}</p>\n    <h3>{`Side sheets close on`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Backdrop click`}</li>\n      <li parentName=\"ul\">{`Close icon button click`}</li>\n      <li parentName=\"ul\">{`Escape key`}</li>\n      <li parentName=\"ul\">{`The close function being called`}</li>\n    </ul>\n    <h3>{`Focus management`}</h3>\n    <p>{`When opening the `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{`, focus will be brought inside the `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` by looking for elements with `}<inlineCode parentName=\"p\">{`[autofocus]`}</inlineCode>{` first, `}<inlineCode parentName=\"p\">{`[tabindex]`}</inlineCode>{` second and `}<inlineCode parentName=\"p\">{`button`}</inlineCode>{` last.`}</p>\n    <p>{`When closing the `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{`, focus will be brought back to the element that was focused before opening the `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{`.\nThis is normally the button that triggered the `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{`.`}</p>\n    <h2>{`Basic example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        <Paragraph margin={40}>Basic Example</Paragraph>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Change position`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`SideSheet`}</inlineCode>{` component can appearn on all side of the screens.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.TOP`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.RIGHT`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.BOTTOM`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Position.LEFT`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        position={Position.TOP}\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n      >\n        <Paragraph margin={40}>Basic Example</Paragraph>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Full featured example`}</h2>\n    <p>{`Full featured example with a header with a title, subtitle and a tab bar.\nContent is a simple card.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        containerProps={{\n          display: 'flex',\n          flex: '1',\n          flexDirection: 'column',\n        }}\n      >\n        <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n          <Pane padding={16} borderBottom=\"muted\">\n            <Heading size={600}>Title</Heading>\n            <Paragraph size={400} color=\"muted\">\n              Optional description or sub title\n            </Paragraph>\n          </Pane>\n          <Pane display=\"flex\" padding={8}>\n            <Tablist>\n               {['Traits', 'Event History', 'Identities'].map(\n                  (tab, index) => (\n                    <Tab\n                      key={tab}\n                      isSelected={state.selectedIndex === index}\n                      onSelect={() => setState({ selectedIndex: index })}\n                    >\n                      {tab}\n                    </Tab>\n                  )\n                )}\n\n            </Tablist>\n          </Pane>\n        </Pane>\n        <Pane flex=\"1\" overflowY=\"scroll\" background=\"tint1\" padding={16}>\n          <Card\n            backgroundColor=\"white\"\n            elevation={0}\n            height={240}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Heading>Some content</Heading>\n          </Card>\n        </Pane>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Title only`}</h2>\n    <p>{`Example with a header with a title. Content is a simple card.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        containerProps={{\n          display: 'flex',\n          flex: '1',\n          flexDirection: 'column',\n        }}\n      >\n        <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n          <Pane padding={16}>\n            <Heading size={600}>Title</Heading>\n          </Pane>\n        </Pane>\n        <Pane flex=\"1\" overflowY=\"scroll\" background=\"tint1\" padding={16}>\n          <Card\n            backgroundColor=\"white\"\n            elevation={0}\n            height={240}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Heading>Some content</Heading>\n          </Card>\n        </Pane>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Title and subtitle`}</h2>\n    <p>{`Example with a header with a title and title. Content is a simple card.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        containerProps={{\n          display: 'flex',\n          flex: '1',\n          flexDirection: 'column',\n        }}\n      >\n        <Pane zIndex={1} flexShrink={0} elevation={0} backgroundColor=\"white\">\n          <Pane padding={16}>\n            <Heading size={600}>Title</Heading>\n            <Paragraph size={400}>\n              Optional description or sub title\n            </Paragraph>\n          </Pane>\n        </Pane>\n        <Pane flex=\"1\" overflowY=\"scroll\" background=\"tint1\" padding={16}>\n          <Card\n            backgroundColor=\"white\"\n            elevation={0}\n            height={240}\n            display=\"flex\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Heading>Some content</Heading>\n          </Card>\n        </Pane>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Basic Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Preserve scroll position and prevent body scrolling`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`preventBodyScrolling`}</inlineCode>{` prop to disable scrolling outside the side sheet.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"collapse\",\n        \"collapse\": true\n      }}>{`<Component initialState={{ isShown: false }}>\n  {({ state, setState }) => (\n    <React.Fragment>\n      <SideSheet\n        isShown={state.isShown}\n        onCloseComplete={() => setState({ isShown: false })}\n        preventBodyScrolling\n      >\n        <Paragraph margin={40}>Basic Example</Paragraph>\n      </SideSheet>\n      <Button onClick={() => setState({ isShown: true })}>\n        Show Side Sheet\n      </Button>\n    </React.Fragment>\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"SideSheet\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}