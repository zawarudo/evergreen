(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{970:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return p}));t(5),t(6),t(4),t(7),t(2),t(0);var a=t(120),l=t(940),i=t(941);var o={},s={_frontmatter:o},r=l.a;function p(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,["components"]);return Object(a.b)(r,Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"TagInput")," component is a text input component that adds values as tags."),Object(a.b)("h2",null,"Highlights"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Backspace (when cursor is at position 0 in the input) removes items"),Object(a.b)("li",{parentName:"ul"},"Enter keypress appends items to the list"),Object(a.b)("li",{parentName:"ul"},"Define (or disable) a ",Object(a.b)("inlineCode",{parentName:"li"},"separator")," to add multiple items at once (splits on comma and new line by default)"),Object(a.b)("li",{parentName:"ul"},"Values prop is controlled,  it's up to consumers to control adding/removing items via ",Object(a.b)("inlineCode",{parentName:"li"},"onAdd"),", ",Object(a.b)("inlineCode",{parentName:"li"},"onRemove"),", or conveniently using ",Object(a.b)("inlineCode",{parentName:"li"},"onChange")," to get the new array."),Object(a.b)("li",{parentName:"ul"},"Prevent input clearing (for instance if an item is invalid) by returning ",Object(a.b)("inlineCode",{parentName:"li"},"false")," during ",Object(a.b)("inlineCode",{parentName:"li"},"onAdd")," or ",Object(a.b)("inlineCode",{parentName:"li"},"onChange"))),Object(a.b)("h2",null,"Basic controlled TagInput"),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      inputProps={{ placeholder: 'Add trees...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Full width TagInput"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"width")," property to control the width of the ",Object(a.b)("inlineCode",{parentName:"p"},"TagInput"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      inputProps={{ placeholder: 'Add trees...' }}\n      width=\"100%\"\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Disabled TagInput"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"disabled")," property to disable interactions with the ",Object(a.b)("inlineCode",{parentName:"p"},"TagInput"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      disabled\n      inputProps={{ placeholder: 'Add trees...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Change props of tags"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},"tagProps")," to change properties of a tag.\nThis is useful in cases when you want to create red tags for example."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      tagProps={{\n        color: 'red',\n        isSolid: true\n      }}\n      inputProps={{ placeholder: 'Add red items...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Change props of tags based on the value"),Object(a.b)("p",null,"In some cases you might want to change the props of a tag based on the input.\nPass a function to the ",Object(a.b)("inlineCode",{parentName:"p"},"tagProps")," to achieve this."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ values: ['matt@awesome.com', 'troll_mailer'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      tagProps={value => {\n        if (!value.includes('@')) return { color: 'red', isSolid: true }\n        return {}\n      }}\n      inputProps={{ placeholder: 'Add email...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n")),Object(a.b)("h2",null,"Using onAdd and onRemove (advanced)"),Object(a.b)("p",null,"In more delicate use cases you can use ",Object(a.b)("inlineCode",{parentName:"p"},"onAdd")," and ",Object(a.b)("inlineCode",{parentName:"p"},"onRemove")," instead of ",Object(a.b)("inlineCode",{parentName:"p"},"onChange"),"."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onAdd/onChange")," will give you strings that were entered and split (based on ",Object(a.b)("inlineCode",{parentName:"li"},"separator"),") and trimmed"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"onRemove/onChange")," will give you the ",Object(a.b)("inlineCode",{parentName:"li"},"this.props.values")," with the item removed at a particular index, which could contain jsx if your ",Object(a.b)("inlineCode",{parentName:"li"},"props.values")," included it")),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"If you are using an array of strings for use ",Object(a.b)("inlineCode",{parentName:"em"},"onChange")," safely"),", otherwise use ",Object(a.b)("inlineCode",{parentName:"p"},"onAdd/onRemove")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"<Component initialState={{ values: ['matt@awesome.com'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      inputProps={{ placeholder: 'Add email...' }}\n      values={state.values}\n      onAdd={value => {\n        if (!value.includes('@')) {\n          toaster.danger('Oops, you tried entering a invalid email. Try again.')\n          return\n        }\n        setState({\n          values: [...state.values, value]\n        })\n      }}\n      onRemove={(_value, index) => {\n        setState({\n          values: state.values.filter((_, i) => i !== index)\n        })\n      }}\n    />\n  )}\n</Component>\n")),Object(a.b)(i.a,{of:"TagInput",mdxType:"PropsTable"}))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-components-tag-input-mdx-260009368a3ccd5f7885.js.map