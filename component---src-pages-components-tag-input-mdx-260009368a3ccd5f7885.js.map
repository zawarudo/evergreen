{"version":3,"sources":["webpack:///./src/pages/components/tag-input.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,4BAAW,0BAAYC,WAAW,KAAvB,YAAX,kEACA,oCACA,sBACE,kBAAIA,WAAW,MAAf,uEACA,kBAAIA,WAAW,MAAf,4CACA,kBAAIA,WAAW,MAAf,yBAA8C,0BAAYA,WAAW,MAAvB,aAA9C,4EACA,kBAAIA,WAAW,MAAf,yFAA8G,0BAAYA,WAAW,MAAvB,SAA9G,KAAsK,0BAAYA,WAAW,MAAvB,YAAtK,2BAAuP,0BAAYA,WAAW,MAAvB,YAAvP,0BACA,kBAAIA,WAAW,MAAf,4EAAiG,0BAAYA,WAAW,MAAvB,SAAjG,WAA+J,0BAAYA,WAAW,MAAvB,SAA/J,OAAyN,0BAAYA,WAAW,MAAvB,cAE3N,mDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iSAcL,6CACA,gCAAe,0BAAYA,WAAW,KAAvB,SAAf,yCAA0G,0BAAYA,WAAW,KAAvB,YAA1G,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uTAeL,2CACA,gCAAe,0BAAYA,WAAW,KAAvB,YAAf,8CAAkH,0BAAYA,WAAW,KAAvB,YAAlH,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iTAeL,8CACA,gCAAe,0BAAYA,WAAW,KAAvB,YAAf,0GAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gXAkBL,iEACA,8HACqB,0BAAYA,WAAW,KAAvB,YADrB,qBAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qbAkBL,6DACA,+DAA8C,0BAAYA,WAAW,KAAvB,SAA9C,QAAwG,0BAAYA,WAAW,KAAvB,YAAxG,eAA4K,0BAAYA,WAAW,KAAvB,YAA5K,KACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,kBAApB,gEAAgJ,0BAAYA,WAAW,MAAvB,aAAhJ,iBACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBAApB,sBAAyG,0BAAYA,WAAW,MAAvB,qBAAzG,iFAAyP,0BAAYA,WAAW,MAAvB,gBAAzP,iBAEF,qBAAG,kBAAIA,WAAW,KAAf,gDAAoE,0BAAYA,WAAW,MAAvB,YAApE,WAAH,mBAAgK,0BAAYA,WAAW,KAAvB,mBAChK,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8mBAyBL,YAAC,IAAD,CAAYC,GAAG,WAAWF,QAAQ,gBAKtCH,EAAWM,gBAAiB","file":"component---src-pages-components-tag-input-mdx-260009368a3ccd5f7885.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`The `}<inlineCode parentName=\"p\">{`TagInput`}</inlineCode>{` component is a text input component that adds values as tags.`}</p>\n    <h2>{`Highlights`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Backspace (when cursor is at position 0 in the input) removes items`}</li>\n      <li parentName=\"ul\">{`Enter keypress appends items to the list`}</li>\n      <li parentName=\"ul\">{`Define (or disable) a `}<inlineCode parentName=\"li\">{`separator`}</inlineCode>{` to add multiple items at once (splits on comma and new line by default)`}</li>\n      <li parentName=\"ul\">{`Values prop is controlled,  it's up to consumers to control adding/removing items via `}<inlineCode parentName=\"li\">{`onAdd`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`onRemove`}</inlineCode>{`, or conveniently using `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode>{` to get the new array.`}</li>\n      <li parentName=\"ul\">{`Prevent input clearing (for instance if an item is invalid) by returning `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{` during `}<inlineCode parentName=\"li\">{`onAdd`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`onChange`}</inlineCode></li>\n    </ul>\n    <h2>{`Basic controlled TagInput`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      inputProps={{ placeholder: 'Add trees...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Full width TagInput`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`width`}</inlineCode>{` property to control the width of the `}<inlineCode parentName=\"p\">{`TagInput`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      inputProps={{ placeholder: 'Add trees...' }}\n      width=\"100%\"\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Disabled TagInput`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` property to disable interactions with the `}<inlineCode parentName=\"p\">{`TagInput`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      disabled\n      inputProps={{ placeholder: 'Add trees...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Change props of tags`}</h2>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`tagProps`}</inlineCode>{` to change properties of a tag.\nThis is useful in cases when you want to create red tags for example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ values: ['Kauri', 'Willow'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      tagProps={{\n        color: 'red',\n        isSolid: true\n      }}\n      inputProps={{ placeholder: 'Add red items...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Change props of tags based on the value`}</h2>\n    <p>{`In some cases you might want to change the props of a tag based on the input.\nPass a function to the `}<inlineCode parentName=\"p\">{`tagProps`}</inlineCode>{` to achieve this.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ values: ['matt@awesome.com', 'troll_mailer'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      tagProps={value => {\n        if (!value.includes('@')) return { color: 'red', isSolid: true }\n        return {}\n      }}\n      inputProps={{ placeholder: 'Add email...' }}\n      values={state.values}\n      onChange={values => {\n        setState({ values })\n      }}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Using onAdd and onRemove (advanced)`}</h2>\n    <p>{`In more delicate use cases you can use `}<inlineCode parentName=\"p\">{`onAdd`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onRemove`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{`.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onAdd/onChange`}</inlineCode>{` will give you strings that were entered and split (based on `}<inlineCode parentName=\"li\">{`separator`}</inlineCode>{`) and trimmed`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onRemove/onChange`}</inlineCode>{` will give you the `}<inlineCode parentName=\"li\">{`this.props.values`}</inlineCode>{` with the item removed at a particular index, which could contain jsx if your `}<inlineCode parentName=\"li\">{`props.values`}</inlineCode>{` included it`}</li>\n    </ul>\n    <p><em parentName=\"p\">{`If you are using an array of strings for use `}<inlineCode parentName=\"em\">{`onChange`}</inlineCode>{` safely`}</em>{`, otherwise use `}<inlineCode parentName=\"p\">{`onAdd/onRemove`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ values: ['matt@awesome.com'] }}>\n  {({ state, setState }) => (\n    <TagInput\n      inputProps={{ placeholder: 'Add email...' }}\n      values={state.values}\n      onAdd={value => {\n        if (!value.includes('@')) {\n          toaster.danger('Oops, you tried entering a invalid email. Try again.')\n          return\n        }\n        setState({\n          values: [...state.values, value]\n        })\n      }}\n      onRemove={(_value, index) => {\n        setState({\n          values: state.values.filter((_, i) => i !== index)\n        })\n      }}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"TagInput\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}