{"version":3,"sources":["webpack:///./src/pages/components/text-input.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,gFACA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,aAApB,mDAAsH,0BAAYA,WAAW,MAAvB,SAAtH,aACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,kBAApB,8FAEF,mCACA,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,sEACoB,0BAAYA,WAAW,KAAvB,SADpB,aAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0FAOL,0CACA,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,sCAAuG,0BAAYA,WAAW,KAAvB,SAAvG,mBACE,0BAAYA,WAAW,KAAvB,kBADF,kDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+MAWL,kCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6BAIL,iCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8BAIL,uCACA,4BAAW,0BAAYA,WAAW,KAAvB,YAAX,aAA6E,0BAAYA,WAAW,KAAvB,UAA7E,+BACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,iGAOL,sCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mGAOL,YAAC,IAAD,CAAYC,GAAG,YAAYF,QAAQ,eACnC,wCACA,4BAAW,0BAAYC,WAAW,KAAvB,kBAAX,yBAA+F,0BAAYA,WAAW,KAAvB,aAA/F,+BACF,0BAAYA,WAAW,KAAvB,eADE,KAC2D,0BAAYA,WAAW,KAAvB,qBAD3D,QACiI,0BAAYA,WAAW,KAAvB,QADjI,KAEA,+CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wIAQL,wDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0HAQL,mDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gLAUL,uCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gLAUL,kEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wLAUL,0CACA,4BAAW,0BAAYA,WAAW,KAAvB,kBAAX,sCAA4G,0BAAYA,WAAW,KAAvB,SAA5G,mBACE,0BAAYA,WAAW,KAAvB,kBADF,kDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gUAcL,YAAC,IAAD,CAAYC,GAAG,iBAAiBF,QAAQ,gBAK5CH,EAAWM,gBAAiB","file":"component---src-pages-components-text-input-mdx-b75ff9aaba16c9357b74.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`Evergreen exports two components to create text inputs:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TextInput`}</strong>{`: base text input component. Directly maps to a `}<inlineCode parentName=\"li\">{`input`}</inlineCode>{` element.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TextInputField`}</strong>{`: combines a label, text input and validation message in one. Used for traditional forms.`}</li>\n    </ul>\n    <h1>{`TextInput`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component is a basic text input component.\nIt directly maps to a `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` element.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInput\n  name=\"text-input-name\"\n  placeholder=\"Text input placeholder...\"\n/>\n`}</code></pre>\n    <h2>{`Controlled usage`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` component works the same as using `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` directly.\nUse `}<inlineCode parentName=\"p\">{`e.target.value`}</inlineCode>{` to get the value of the component on change. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ value: ''}}>\n  {({ state, setState }) => (\n    <TextInput\n      onChange={e => setState({ value: e.target.value })}\n      value={state.value}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <h2>{`Disabled`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInput disabled />\n`}</code></pre>\n    <h2>{`Invalid`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInput isInvalid />\n`}</code></pre>\n    <h2>{`Change height`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextIput`}</inlineCode>{` uses the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` property to resize itself.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane>\n  <TextInput height={24} marginRight={16} />\n  <TextInput height={40} />\n</Pane>\n`}</code></pre>\n    <h2>{`Change width`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane>\n  <TextInput width=\"100%\" marginBottom={16} />\n  <TextInput width={320} />\n</Pane>\n`}</code></pre>\n    <PropsTable of=\"TextInput\" mdxType=\"PropsTable\" />\n    <h1>{`TextInputField`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextInputField`}</inlineCode>{` component combines a `}<inlineCode parentName=\"p\">{`TextInput`}</inlineCode>{` with a label and optional\n`}<inlineCode parentName=\"p\">{`description`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`validationMessage`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`hint`}</inlineCode>{`.`}</p>\n    <h2>{`Label and description`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInputField\n  label=\"Default text input field\"\n  description=\"This is a description.\"\n  placeholder=\"Placeholder text\"\n/>\n`}</code></pre>\n    <h2>{`A hint is under the text input`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInputField\n  label=\"Default text input field\"\n  hint=\"This is a hint.\"\n  placeholder=\"Placeholder text\"\n/>\n`}</code></pre>\n    <h2>{`Required text input field`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInputField\n  id=\"ids-are-optional\"\n  label=\"A required text input field\"\n  required\n  description=\"This is a description.\"\n  placeholder=\"Placeholder text\"\n/>\n`}</code></pre>\n    <h2>{`Invalid field`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInputField\n  isInvalid\n  required\n  label=\"A required text input field\"\n  description=\"This is a description.\"\n  validationMessage=\"This field is required\"\n/>\n`}</code></pre>\n    <h2>{`Validation message without invalid input`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextInputField\n  isInvalid={false}\n  required\n  label=\"A required text input field\"\n  description=\"This is a description.\"\n  validationMessage=\"This field is required\"\n/>\n`}</code></pre>\n    <h2>{`Controlled usage`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextInputField`}</inlineCode>{` component works the same as using `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` directly.\nUse `}<inlineCode parentName=\"p\">{`e.target.value`}</inlineCode>{` to get the value of the component on change. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ value: '' }}>\n  {({ state, setState }) => (\n    <TextInputField\n      label=\"A controlled text input field\"\n      required\n      description=\"This is a description.\"\n      value={state.value}\n      onChange={e => setState({ value: e.target.value })}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"TextInputField\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}