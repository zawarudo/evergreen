{"version":3,"sources":["webpack:///./src/pages/components/textarea.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","isMDXComponent"],"mappings":"oPAOO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,sCACA,uGACA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,YAApB,kDAAoH,0BAAYA,WAAW,MAAvB,YAApH,aACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,iBAApB,6FAEF,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,kFAOL,+CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oNAgBL,0CACA,4BAAW,0BAAYA,WAAW,KAAvB,YAAX,sCAAsG,0BAAYA,WAAW,KAAvB,YAAtG,mBACE,0BAAYA,WAAW,KAAvB,kBADF,iDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,mNAWL,YAAC,IAAD,CAAYC,GAAG,WAAWF,QAAQ,eAClC,uCACA,4BAAW,0BAAYC,WAAW,KAAvB,iBAAX,yBAA8F,0BAAYA,WAAW,KAAvB,YAA9F,+BACF,0BAAYA,WAAW,KAAvB,eADE,KAC2D,0BAAYA,WAAW,KAAvB,qBAD3D,QACiI,0BAAYA,WAAW,KAAvB,QADjI,KAEA,+CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qIAQL,sDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uHAQL,iDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6KAUL,uCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,6KAUL,kEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qLAUL,0CACA,4BAAW,0BAAYA,WAAW,KAAvB,iBAAX,sCAA2G,0BAAYA,WAAW,KAAvB,YAA3G,mBACE,0BAAYA,WAAW,KAAvB,kBADF,iDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+TAcL,YAAC,IAAD,CAAYC,GAAG,gBAAgBF,QAAQ,gBAK3CH,EAAWM,gBAAiB","file":"component---src-pages-components-textarea-mdx-f893489f2c1e0ad92dcf.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nimport PropsTable from 'components/PropsTable';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`Similar to text inputs, Evergreen exports two components to create text areas:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Textarea`}</strong>{`: base text area component. Directly maps to a `}<inlineCode parentName=\"li\">{`textarea`}</inlineCode>{` element.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`TextareaField`}</strong>{`: combines a label, textarea  and validation message in one. Used for traditional forms.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Textarea\n  name=\"textarea-1\"\n  placeholder=\"Textarea placeholder...\"\n/>\n`}</code></pre>\n    <h2>{`Textarea with a label`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Pane>\n  <Label\n    htmlFor=\"textarea-2\"\n    marginBottom={4}\n    display=\"block\"\n  >\n    Label\n  </Label>\n  <Textarea\n    id=\"textarea-2\"\n    placeholder=\"Textarea placeholder...\"\n  />\n</Pane>\n`}</code></pre>\n    <h2>{`Controlled usage`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` component works the same as using `}<inlineCode parentName=\"p\">{`textarea`}</inlineCode>{` directly.\nUse `}<inlineCode parentName=\"p\">{`e.target.value`}</inlineCode>{` to get the value of the component on change.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ value: 'Hello'}}>\n  {({ state, setState }) => (\n    <Textarea\n      onChange={e => setState({ value: e.target.value })}\n      value={state.value}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"Textarea\" mdxType=\"PropsTable\" />\n    <h1>{`TextareaField`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextareaField`}</inlineCode>{` component combines a `}<inlineCode parentName=\"p\">{`Textarea`}</inlineCode>{` with a label and optional\n`}<inlineCode parentName=\"p\">{`description`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`validationMessage`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`hint`}</inlineCode>{`.`}</p>\n    <h2>{`Label and description`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextareaField\n  label=\"Default textarea field\"\n  description=\"This is a description.\"\n  placeholder=\"Placeholder text\"\n/>\n`}</code></pre>\n    <h2>{`A hint is under the textarea`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextareaField\n  label=\"Default textarea field\"\n  hint=\"This is a hint.\"\n  placeholder=\"Placeholder text\"\n/>\n`}</code></pre>\n    <h2>{`Required textarea field`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextareaField\n  id=\"ids-are-optional\"\n  label=\"A required textarea field\"\n  required\n  description=\"This is a description.\"\n  placeholder=\"Placeholder text\"\n/>\n`}</code></pre>\n    <h2>{`Invalid field`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextareaField\n  isInvalid\n  required\n  label=\"A required textarea field\"\n  description=\"This is a description.\"\n  validationMessage=\"This field is required\"\n/>\n`}</code></pre>\n    <h2>{`Validation message without invalid input`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<TextareaField\n  isInvalid={false}\n  required\n  label=\"A required textarea field\"\n  description=\"This is a description.\"\n  validationMessage=\"This field is required\"\n/>\n`}</code></pre>\n    <h2>{`Controlled usage`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`TextareaField`}</inlineCode>{` component works the same as using `}<inlineCode parentName=\"p\">{`textarea`}</inlineCode>{` directly.\nUse `}<inlineCode parentName=\"p\">{`e.target.value`}</inlineCode>{` to get the value of the component on change.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Component initialState={{ value: '' }}>\n  {({ state, setState }) => (\n    <TextareaField\n      label=\"A controlled text input field\"\n      required\n      description=\"This is a description.\"\n      value={state.value}\n      onChange={e => setState({ value: e.target.value })}\n    />\n  )}\n</Component>\n`}</code></pre>\n    <PropsTable of=\"TextareaField\" mdxType=\"PropsTable\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}