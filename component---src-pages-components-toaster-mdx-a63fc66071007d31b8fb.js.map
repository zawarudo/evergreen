{"version":3,"sources":["webpack:///./src/pages/components/toaster.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sCACA,4BAAW,0BAAYC,WAAW,KAAvB,WAAX,8KAGA,qCACA,mJAEA,gDACA,+DAA8C,0BAAYA,WAAW,KAAvB,SAA9C,8FAEA,yCACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,QAApB,KAAmE,0BAAYA,WAAW,MAAvB,qBACnE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,KAAsE,0BAAYA,WAAW,MAAvB,sBACtE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,WAApB,KAAsE,0BAAYA,WAAW,MAAvB,sBACtE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,UAApB,KAAqE,0BAAYA,WAAW,MAAvB,sBAEvE,4CACA,iNAEA,wDAAuC,0BAAYA,WAAW,KAAvB,sBAAvC,8BACA,qDACA,2KAEA,sCACA,4BAAW,0BAAYA,WAAW,KAAvB,WAAX,oCAAmG,0BAAYA,WAAW,KAAvB,YAAnG,yBACE,0BAAYA,WAAW,KAAvB,WADF,0BACgF,0BAAYA,WAAW,KAAvB,WADhF,WAEA,gCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2IAYL,iCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oIAYL,iCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uIAYL,gCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sJAYL,mCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wFAUL,8CACA,0BAAS,0BAAYA,WAAW,KAAvB,eAAT,mCAAoG,0BAAYA,WAAW,KAAvB,SAApG,qDAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sPAeL,qDACA,mGACU,0BAAYA,WAAW,KAAvB,YADV,OACsE,0BAAYA,WAAW,KAAvB,KADtE,kBAEE,0BAAYA,WAAW,KAAvB,YAFF,+CAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4KAeL,uCACA,wIACsB,0BAAYA,WAAW,KAAvB,MADtB,uGAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4KAgBTJ,EAAWK,gBAAiB","file":"component---src-pages-components-toaster-mdx-a63fc66071007d31b8fb.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/m/proj/curr/evergreen/docs/src/components/Page.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Introduction`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`toaster`}</inlineCode>{` is used to show toasts (alerts) on top of an overlay.\nThe toasts will close themselves when the close button is clicked,\nor after a timeout — the default is 5 seconds.`}</p>\n    <h3>{`When To Use`}</h3>\n    <p>{`When you want to give feedback to your users about a action they take.\nOften this is in the form of creation or deletion.`}</p>\n    <h3>{`Implementation details`}</h3>\n    <p>{`A toast is simply a wrapper around the `}<inlineCode parentName=\"p\">{`Alert`}</inlineCode>{` component and has the same kind of types as an alert.\nThe following types are available:`}</p>\n    <h3>{`Types of toasts`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`info`}</strong>{`: `}<inlineCode parentName=\"li\">{`toaster.notify()`}</inlineCode></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`success`}</strong>{`: `}<inlineCode parentName=\"li\">{`toaster.success()`}</inlineCode></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`warning`}</strong>{`: `}<inlineCode parentName=\"li\">{`toaster.warning()`}</inlineCode></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`danger`}</strong>{`: `}<inlineCode parentName=\"li\">{`toaster.danger()`}</inlineCode></li>\n    </ul>\n    <h3>{`Closing all toasts`}</h3>\n    <p>{`In some situations toasts might become outdated before they expire.\nFor example when showing a toast in a setup flow, canceling out of that setup flow might make the toast irrelevant.`}</p>\n    <p>{`In those situations you can use `}<inlineCode parentName=\"p\">{`toaster.closeAll()`}</inlineCode>{` to close all open toasts.`}</p>\n    <h2>{`Keep around when mouse over`}</h2>\n    <p>{`When the use hovers (mouse overs) the toast it will stop the countdown timer and the toast\nwill stay alive as long as the toast is being hovered.`}</p>\n    <h3>{`Self managed`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`toaster`}</inlineCode>{` manages state itself — and uses `}<inlineCode parentName=\"p\">{`ReactDOM`}</inlineCode>{` to show toasts.\nThe `}<inlineCode parentName=\"p\">{`toaster`}</inlineCode>{` is an instance of the `}<inlineCode parentName=\"p\">{`Toaster`}</inlineCode>{` class.`}</p>\n    <h2>{`Notify`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.notify(\n      'Evergreen is a open-source design system'\n    )\n  }\n>\n  Notify\n</Button>\n`}</code></pre>\n    <h2>{`Success`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.success(\n      'Your source is now sending data'\n    )\n  }\n>\n  Success\n</Button>\n`}</code></pre>\n    <h2>{`Warning`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.warning(\n      'Changes will affect all Warehouses'\n    )\n  }\n>\n  Warning\n</Button>\n`}</code></pre>\n    <h2>{`Danger`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.danger(\n      'Something went wrong trying to create your audience'\n    )\n  }\n>\n  Danger\n</Button>\n`}</code></pre>\n    <h2>{`Close all`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.closeAll()\n  }\n>\n  Close All\n</Button>\n`}</code></pre>\n    <h2>{`Adding a description`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`description`}</inlineCode>{` is used as the children of the `}<inlineCode parentName=\"p\">{`Alert`}</inlineCode>{` component.\nThe description can be a React node.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.success(\n      'Your source is now sending data',\n      {\n        description: 'Connect your source to a destination to receive data.'\n      }\n    )\n  }\n>\n  Success with description\n</Button>\n`}</code></pre>\n    <h2>{`Toasts with custom duration`}</h2>\n    <p>{`It is possible to add a custom duration when showing a toast.\nThe default `}<inlineCode parentName=\"p\">{`duration`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`5`}</inlineCode>{` seconds.\nThe `}<inlineCode parentName=\"p\">{`duration`}</inlineCode>{` property is in seconds — not milliseconds.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.success(\n      'Stick around for 10 seconds',\n      {\n        duration: 10\n      }\n    )\n  }\n>\n  10 Seconds\n</Button>\n`}</code></pre>\n    <h2>{`Unique toasts`}</h2>\n    <p>{`There are cases when it's only one toast with the same content can be shown at a time.\nPassing a unique ID via `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` property allows Evergreen to close all previous toasts with the same ID, before showing a new one.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<Button\n  onClick={() =>\n    toaster.warning('Only one toaster will be shown', {\n      id: 'forbidden-action'\n    })\n  }\n>\n  Show only one toaster\n</Button>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}