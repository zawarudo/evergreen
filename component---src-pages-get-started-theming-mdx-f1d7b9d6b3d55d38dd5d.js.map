{"version":3,"sources":["webpack:///./src/components/Sidebar.js","webpack:///./src/components/GetStartedSidebar.js","webpack:///./src/components/ThemeLayout.js","webpack:///./src/pages/get-started/theming.mdx"],"names":["Sidebar","render","this","props","groups","children","className","map","group","key","title","links","label","to","exact","activeClassName","PureComponent","defaultProps","GetStartedSidebar","PageLayout","Layout","TopBar","style","marginBottom","DocsMDXProvider","noInline","PageFooter","_frontmatter","layoutProps","MDXLayout","ThemeLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"uJAIqBA,E,gLAqBnBC,OAAA,WAAU,IAAD,EACgCC,KAAKC,MAA1BC,GADX,EACCC,SADD,EACWD,QAAWD,E,oIADtB,0BAEP,OACE,yCAAOG,UAAU,8BAAiCH,GAChD,yBAAKG,UAAU,iBACZF,EAAOG,KAAI,SAAAC,GACV,OACE,yBACEC,IAAKD,EAAME,OAASF,EAAMG,MAAM,GAAGC,MACnCN,UAAU,YAETE,EAAME,OACL,wBAAIJ,UAAU,kBAAkBE,EAAME,OAExC,yBAAKJ,UAAU,gBACZE,EAAMG,MAAMJ,KAAI,gBAAGK,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIC,EAAd,EAAcA,MAAd,OACf,kBAAC,IAAD,CACEL,IAAKI,EACLE,gBAAgB,YAChBF,GAAIA,EACJC,MAAOA,GAENF,c,GA3CcI,iBAAhBhB,EAiBZiB,aAAe,CACpBb,OAAQ,I,sCCnBSc,E,gLAyBnBjB,OAAA,WACE,OAAO,kBAAC,EAAYC,KAAKC,Q,GA1BkBa,iBAA1BE,EAKZD,aAAe,CAIpBb,OAAQ,CACN,CACEO,MAAO,CACL,CACEE,GAAI,4BACJD,MAAO,gBAET,CACEC,GAAI,uBACJD,MAAO,gB,8JCmBJO,EA/BI,SAAC,GAAD,IAAGd,EAAH,EAAGA,SAAH,OACjB,kBAACe,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,uDAEF,yBAAKd,UAAU,cACb,kBAACe,EAAA,EAAD,MACA,0BAAMf,UAAU,mBACd,yBAAKA,UAAU,sBACb,6BAASA,UAAU,2BACjB,yBACEA,UAAU,0BACVgB,MAAO,CAAEC,aAAc,MAEvB,yBAAKjB,UAAU,WACb,kBAACkB,EAAA,EAAD,CAAiBC,UAAQ,GAAEpB,OAKnC,kBAACa,EAAA,EAAD,QAGJ,kBAACQ,EAAA,EAAD,Q,qFC1BG,IAAMC,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACG7B,E,oIACF,mBACD,OAAO,YAAC0B,EAAD,iBAAeD,EAAiBzB,EAAhC,CAAuC6B,WAAYA,EAAYC,QAAQ,cAG5E,wCACA,4EAA2D,0BAAYC,WAAW,KAAvB,iBAA3D,wCACsB,0BAAYA,WAAW,KAAvB,iBADtB,wBAEA,4CAA2B,0BAAYA,WAAW,KAAvB,iBAA3B,uDAA4I,0BAAYA,WAAW,KAAvB,SAA5I,aACA,oIAAmH,0BAAYA,WAAW,KAAvB,SAAnH,4FACA,wCACA,4BAAW,0BAAYA,WAAW,KAAvB,iBAAX,sMAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4NAmBL,wCACA,2FAA0E,0BAAYA,WAAW,KAAvB,iBAA1E,gBACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,udA+BL,yCACA,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,4EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,whBAgCL,wCACA,4BAAW,0BAAYA,WAAW,KAAvB,YAAX,kDAAkH,0BAAYA,WAAW,KAAvB,aAAlH,SACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uhBAsCTH,EAAWI,gBAAiB","file":"component---src-pages-get-started-theming-mdx-f1d7b9d6b3d55d38dd5d.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nexport default class Sidebar extends PureComponent {\n  static propTypes = {\n    children: PropTypes.node,\n    groups: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        exact: PropTypes.bool,\n        links: PropTypes.arrayOf(\n          PropTypes.shape({\n            to: PropTypes.string,\n            label: PropTypes.string\n          })\n        )\n      })\n    )\n  }\n\n  static defaultProps = {\n    groups: []\n  }\n\n  render() {\n    const { children, groups, ...props } = this.props\n    return (\n      <aside className=\"MainLayout-sidebar Sidebar\" {...props}>\n        <div className=\"Sidebar-inner\">\n          {groups.map(group => {\n            return (\n              <div\n                key={group.title || group.links[0].label}\n                className=\"NavGroup\"\n              >\n                {group.title && (\n                  <h3 className=\"NavGroup-title\">{group.title}</h3>\n                )}\n                <nav className=\"NavGroup-nav\">\n                  {group.links.map(({ label, to, exact }) => (\n                    <Link\n                      key={to}\n                      activeClassName=\"is-active\"\n                      to={to}\n                      exact={exact}\n                    >\n                      {label}\n                    </Link>\n                  ))}\n                </nav>\n              </div>\n            )\n          })}\n        </div>\n      </aside>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport Sidebar from './Sidebar'\n\nexport default class GetStartedSidebar extends PureComponent {\n  static propTypes = {\n    ...Sidebar.propTypes\n  }\n\n  static defaultProps = {\n    /**\n     * Manually manage components for now\n     */\n    groups: [\n      {\n        links: [\n          {\n            to: '/get-started/introduction',\n            label: 'Introduction'\n          },\n          {\n            to: '/get-started/theming',\n            label: 'Theming'\n          }\n        ]\n      }\n    ]\n  }\n\n  render() {\n    return <Sidebar {...this.props} />\n  }\n}\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport DocsMDXProvider from './DocsMDXProvider'\nimport TopBar from './TopBar'\nimport GetStartedSidebar from './GetStartedSidebar'\nimport Layout from './Layout'\nimport PageFooter from './PageFooter'\n\nconst PageLayout = ({ children }) => (\n  <Layout>\n    <Helmet>\n      <title>Theming Â· Evergreen</title>\n    </Helmet>\n    <div className=\"MainLayout\">\n      <TopBar />\n      <main className=\"MainLayout-main\">\n        <div className=\"MainLayout-content\">\n          <section className=\"MainLayout-contentRight\">\n            <div\n              className=\"Container-nextToSidebar\"\n              style={{ marginBottom: 160 }}\n            >\n              <div className=\"Content\">\n                <DocsMDXProvider noInline>{children}</DocsMDXProvider>\n              </div>\n            </div>\n          </section>\n        </div>\n        <GetStartedSidebar />\n      </main>\n    </div>\n    <PageFooter />\n  </Layout>\n)\n\nPageLayout.propTypes = {\n  children: PropTypes.node\n}\n\nexport default PageLayout\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport ThemeLayout from '../../components/ThemeLayout';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = ThemeLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3>{`Theme Provider`}</h3>\n    <p>{`In order to style your app, you must wrap it in the `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` component.\nThis component uses the `}<inlineCode parentName=\"p\">{`React.Context`}</inlineCode>{` API under the hood.`}</p>\n    <p>{`In order to use the `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` component, you must pass it a value prop that is a `}<inlineCode parentName=\"p\">{`Theme`}</inlineCode>{` object. `}</p>\n    <p>{`Please note: at this moment in time, theming isn't fully supported yet! There are certain attributes of the `}<inlineCode parentName=\"p\">{`Theme`}</inlineCode>{` object that are required so please be sure you have them when providing a custom theme.`}</p>\n    <h2>{`Simple theming`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` Component, you can either override the default styles(shown below) or use your own theme completely.\nYou can add anything you want to the theme object, as long as you have required properties.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const newTheme = {\n  ...defaultTheme,\n  spinnerColor: 'hotpink'\n}\n\nconst ThemedApp = () => (\n  <ThemeProvider\n    value={newTheme}\n  >\n    <Spinner />\n  </ThemeProvider>\n)\n\nrender(\n  <ThemedApp />\n)\n`}</code></pre>\n    <h2>{`Nested theming`}</h2>\n    <p>{`You can theme certain parts of your app differently by nesting the `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const parentTheme = {\n  ...defaultTheme,\n  spinnerColor: 'hotpink'\n}\n\nconst childTheme = {\n  ...defaultTheme,\n  spinnerColor: 'blue'\n}\n\nconst ThemedParent = ({ children }) => (\n  <ThemeProvider value={parentTheme}>\n    <Spinner />\n    { children }\n  </ThemeProvider>\n)\n\nconst ThemedChild = () => (\n  <ThemeProvider value={childTheme}>\n    <Spinner />\n  </ThemeProvider>\n)\n\nrender(\n  <ThemedParent>\n    <ThemedChild />\n  </ThemedParent>\n)\n`}</code></pre>\n    <h2>{`Using withTheme`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`withTheme`}</inlineCode>{` HOC allows you to easily pass the theme object down to your components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const theme = {\n  ...defaultTheme,\n  myNewButtonStyles: {\n    color: 'white',\n    backgroundColor: 'hotpink',\n    height: 30,\n    borderRadius: '5px',\n  }\n}\n\nconst ThemedApp = ({ children }) => (\n  <ThemeProvider value={theme}>\n    { children }\n  </ThemeProvider>\n)\n\nconst MyNewButton = ({ theme }) => (\n  <button style={theme.myNewButtonStyles}>\n    Custom styled button\n  </button>\n)\n\nconst MyNewThemedButton = withTheme(MyNewButton)\n\nrender(\n  <ThemedApp>\n    <MyNewThemedButton />\n  </ThemedApp>\n)\n`}</code></pre>\n    <h2>{`Using useTheme`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useTheme`}</inlineCode>{` hook provides the same functionalities as the `}<inlineCode parentName=\"p\">{`withTheme`}</inlineCode>{` HOC.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const theme = {\n  ...defaultTheme,\n  myNewButtonStyles: {\n    color: 'white',\n    backgroundColor: 'hotpink',\n    height: 30,\n    borderRadius: '5px',\n  }\n}\n\nconst ThemedApp = ({ children }) => (\n  <ThemeProvider value={theme}>\n    { children }\n  </ThemeProvider>\n)\n\nconst MyNewThemedButton = () => {\n  const theme = useTheme()\n\n  return (\n    <button style={theme.myNewButtonStyles}>\n      Custom styled button\n    </button>\n  )\n}\n\nrender(\n  <ThemedApp>\n    <MyNewThemedButton />\n  </ThemedApp>\n)\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}